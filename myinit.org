#+STARTUP: hidestars
* Notes
** TODO Planned Tweaks
   - [ ] understand company for python
   - [ ] Org Blog w/ [[https://ox-hugo.scripter.co/][ox-hugo]]. [[https://www.reddit.com/r/orgmode/comments/gcex8p/creating_a_blog_with_orgmode/][Reddit Post]]
     - [[https://timdams.com/][This]] blog does a good job organizing the way I'd like, but I'd like it to have a different home page
   - [ ] use yasnippet for inserting bable
   - [ ] move mode specific hotkeys from general to use-package
   - [ ] blacken for python mode
   - [ ] Remove annoying lisp warning and char number warnings for flycheck
   - [ ] Move org-files to dropbox ;; just dragging my feet ;; did note linkup but not gtd
   - [ ] don't delete scratch buffer zzamboni
   - [ ] learn about bookmarks
   - [ ] Figure out where & how windows knows where my emacs is
   - [ ] PDF-viewer ;; seems like a drag on windows. doc-viewer let's me at least see the text
   - [ ] hydra for [[https://github.com/abo-abo/hydra/wiki/Emacs][outline]]
   - [ ] fix ediff
   - [ ] add hooks more elegantly w/ general
   - [ ] babel installs (R)
   - [ ] [[http://www.cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-/][email]]
   - [ ] explore emacs-jupyter
   - [X] improve documentation of this file
   - [X] reduce start time [[https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/][1]] [[https://blog.d46.us/advanced-emacs-startup/][2]]
   - [X] Instead of 'catapult use when microsoft, so I don't need to update my config
   - [X] use ENTER to follow links -- just use C-c C-o
   - [X] Figure out pomodoro
   - [X] gitgutter
   - [X] [[https://github.com/bastibe/org-journal][org-journal]]
   - [X] Config Shackle (do I need to? I feel like I've been able to supress a lot as of late)
   - [X] Default new todo bullet to TODO not inprogress
   - [X] customize telephone line [[https://www.reddit.com/r/emacs/comments/7e7xzg/telephoneline_theming_question/][colors]] to match theme ;; Defaults look better than the starting custom
   - [X] ask about org-habit going away after tweaks ;; decided that It's not a big deal
   - [X] move scheduled to todo
   - [X] hydra for themes solved w/ counsel-load-file
   - [X] Fix Agenda
   - [X] [[https://www.reddit.com/r/emacs/comments/4n0n8o/what_is_the_best_emacs_mode_line_package/][some sort of mode line]]. [[https://github.com/dbordak/telephone-line][Telephone-line]] looks promising
   - [X] Tramp: Fix ivy "c:" problem, or just make custom function around it
   - [X] Custom paths
   - [X] figure out lispy (I just went w/ lispyville)
   - [X] Make sure next buffer and last buffer only do real files
   - [X] move w/ evil in agenda
   - [X] magit consider j and k 
   - [X] spell-fu ;; why not in melpa? aspell w/ wierd packman install
   - [X] make this an org file
   - [ ] vim bracket buffer movement
   - [ ] org make todotype selection easier
   - [ ] Treemacs (do I need this?) ;; no
   - [ ] Use [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]]
   - [ ] ace by abo-abo? Probably more than I need right now
   - [ ] LSP instead of elpy ;; seems like too much of a headache
** Inspiration + links
   - [[https://www.youtube.com/watch?v=49kBWM3RQQ8&list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg&index=1][Using Emacs videos]]
   - Originally inspaired by based on [[https://huytd.github.io/emacs-from-scratch.html#orgf713fce][this]] implementation 
   - Kwrooijen's [[https://github.com/kwrooijen/.emacs.d/tree/40e0054b012814fd1550e3c6648af4a22e73df72][implmentation]]. Uses evil, use-package, and many abo-abo. 
   - Emacs Adventures [[https://github.com/amolgawai/emacsadventures/tree/92578a5b5bf71ccc7f2e1859edefaa97d8d51df1/config][robust emacs config]] 
   - [[https://sam217pa.github.io/2016/09/23/keybindings-strategies-in-emacs/][Key bindings article]]
   - [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][Aaron Bieber]] the guy who convinced me to try Evil. I steal from his Agenda setup
   - [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org][This one]] is beautiful. Found it when investigating mode lines
   - [[https://github.com/noahfrederick/dots/blob/master/emacs/emacs.org][Nox]] has an org set-up in his use-package
   - [[https://github.com/zzamboni/dot-emacs/blob/master/init.org][zzamboni]] has a great literate config. Lots of it considers writing
   - [[http://www.howardism.org/Technical/Emacs/orgmode-wordprocessor.html][This]] guy has a really robust emacs blog. He makes his org-mode look AWESOME. I'm not sure it's worth the effort though. org word processor
   - I borrowed a lot of ideas from [[https://jamiecollinson.com/blog/my-emacs-config/][this]] one
    - [ ] w3m
    - [ ] writegood
    - [ ] customize org appearance
    - [ ] proselint
    - [X] gitgutter
    - [ ] gittimemachine
    - [X] rainbow delimiters
    - [ ] prettify symbols
    - [ ] get rid of ivy ^
   - [[https://github.com/daviwil/emacs-from-scratch][emacs from scratch]] is a great and clean config. It had the global space for me which I have been sorely missing

* Performance Optimization
  This section entirely stolen from [[https://github.com/zzamboni/dot-emacs/blob/master/init.org#performance-optimization][here]].
  
  - [[https://www.reddit.com/r/emacs/comments/3kqt6e/2_easy_little_known_steps_to_speed_up_emacs_start/][Two easy little known steps to speed up Emacs start up time]]
  - [[https://blog.d46.us/advanced-emacs-startup/][Advanced Techniques for Reducing Emacs Startup Time]]
  
  Based on these, I have added the code below.

  First, we wrap the whole init file in a block that sets =file-name-handler-alist= to =nil= to prevent any special-filename parsing of files loaded from the init file (e.g. remote files loaded through tramp, etc.). The =let= block gets closed in the [[Epilogue][Epilogue]].
  
  #+begin_src emacs-lisp
    (let ((file-name-handler-alist nil))
  #+end_src

  Next, a hook that reports how long and how many garbage collections the startup took. We use a hook to run it at the very end, so the message doesn't get clobbered by other messages during startup.

  #+begin_src emacs-lisp
    (add-hook 'emacs-startup-hook
              (lambda ()
                (message "Emacs ready in %s with %d garbage collections."
                         (format "%.2f seconds"
                                 (float-time
                                  (time-subtract after-init-time before-init-time)))
                         gcs-done)))
  #+end_src

  Optionally enable =debug-on-error= - I do this only when I'm trying to figure out some problem in my config.

  #+begin_src emacs-lisp
    ;;(setq debug-on-error t)
  #+end_src

  If the =gcmh= package is already installed, load and enable it early. If not, this gets installed a bit later in the Package Management section. This package manages the garbage collection thresholds and scheduling to improve performance. DISABLED for now because it seems to cause performance degradation when inserting text in long files.

  #+begin_src emacs-lisp
    ;; (when (require 'gcmh nil t)
    ;;   (gcmh-mode 1))
  #+end_src

  We set =gc-cons-threshold= to its maximum value, to prevent any garbage collection from happening during load time. We also reset this value in the [[Epilogue][Epilogue]].
  
  #+begin_src emacs-lisp
    (setq gc-cons-threshold most-positive-fixnum)
  #+end_src

  Using all of this, my startup time went from 21 seconds down to 15 seconds.

* Setup
** Paths
   I use multiple computers. This allows me to update paths globally for each of my machines.
 #+begin_src emacs-lisp
    (setq user-full-name "Andrew Kraemer")
    (setq user-mail-address "andrew.h.kraemer@gmail.com")

    (cond ((string-equal system-name "CAT-4CNZRN2") ;; catapult main computer
	   (setq ak/context-name "catapult"
		 ak/custpath-home "c:/Users/akraemer/"
		 ak/custpath-dropbox "c:/Users/akraemer/Dropbox/"
		 ak/custpath-emacsd "c:/emacs/.emacs.d/"
		 ak/custpath-py-default-env "c:/Users/akraemer/Anaconda3/envs/py38"
		 ak/custpath-flake8 "c:/Users/akraemer/Anaconda3/Scripts/flake8.exe"
		 ak/custpath-aspell "c:/msys64/mingw64/bin/aspell.exe"))
	  ((eq window-system 'ns) ;; macbook
	   (setq ak/context-name "work"
		 ak/custpath-home "/Users/andrew.kraemer/"
		 ak/custpath-dropbox "/Users/andrew.kraemer/Dropbox/"
		 ak/custpath-emacsd "~/.emacs.d/"
		 ak/custpath-py-default-env "/Users/andrew.kraemer/anaconda3/envs/myenv"
		 ak/custpath-aspell "/usr/local/bin/aspell"))
	  ((eq window-system 'mac) ;; macmini
	   (setq ak/context-name "work"
		 ak/custpath-home "/Users/AndrewKraemer/"
		 ak/custpath-dropbox "/Users/AndrewKraemer/Dropbox/"
		 ak/custpath-emacsd "~/.emacs.d/"
		 ak/custpath-py-default-env "/Users/AndrewKraemer/anaconda3/envs/py37"
		 ak/custpath-aspell "/usr/local/bin/aspell"))
	  ((string-equal system-name "andrew-MACH-WX9") ;; linux
	   (setq ak/context-name "personal"
		 ak/custpath-home "/home/andrew/"
		 ak/custpath-dropbox "/home/andrew/Dropbox/"
		 ak/custpath-emacsd "~/.emacs.d/"
		 ak/custpath-py-default-env "/home/andrew/anaconda3/envs/py38"
		 ak/custpath-aspell "/usr/local/bin/aspell")))

   (setq ak/custpath-journal-path (concat ak/custpath-dropbox "journal/")
	 ak/custpath-dropbox-org (concat ak/custpath-dropbox "org/")
	 ak/custpath-org-notes (concat ak/custpath-dropbox-org ak/context-name "/")
	 ak/custpath-org-personal-loc (concat ak/custpath-dropbox-org "personal/gtd.org")
	 ak/custpath-org-work-loc (concat ak/custpath-dropbox-org "catapult/gtd.org"))
 #+end_src

 #+RESULTS:
 : /Users/AndrewKraemer/Dropbox/org/catapult/gtd.org

** Better Defaults
   TODO document these chunks
 #+begin_src emacs-lisp
   ;;; Code:
   ;; Minimal UI
   (scroll-bar-mode  -1)
   (tool-bar-mode    -1)
   (tooltip-mode     -1)
   (blink-cursor-mode 0)
   (fringe-mode 0)
   (setq initial-scratch-message nil)
   (setq ring-bell-function 'ignore)
   (setq redisplay-dont-pause t ;; Scrolling smoothness
     scroll-margin 1
     scroll-step 1
     scroll-conservatively 10000
     scroll-preserve-screen-position 1)
   (setq temporary-file-directory (concat ak/custpath-emacsd "tmp")) ;; Don't save flycheck locally

   ;; standardizes all yes/no quetions to y/n.
   (fset 'yes-or-no-p 'y-or-n-p)

   ;; Show matching parens
   (setq show-paren-delay 0)
   (show-paren-mode 1)

   ;;match parens automatically
   (electric-pair-mode +1)

   ;; Pretty lambda symbol
   (global-prettify-symbols-mode 1)

   ;; automatically update buffers that have changed under file
   (global-auto-revert-mode t)

   ;; work around for gnu archive not working on linux ;; though it did break melpa on windows.
   ;; Commenting out to see how things are impacted
   (when (string-equal system-name "andrew-MACH-WX9")
     (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
     (setq package-check-signature nil))
#+end_src

 #+RESULTS:
 : NORMAL:-VERS-TLS1.3

    Org mode was being very slow on my windows machine, so I found [[https://www.reddit.com/r/emacs/comments/55ork0/is_emacs_251_noticeably_slower_than_245_on_windows/d8cmm7v/][this]] solution to improve garbage collection.
 #+begin_src emacs-lisp
   (when (eq window-system 'w32)
     (setq gc-cons-threshold (* 511 1024 1024))
     (setq gc-cons-percentage 0.5)
     (run-with-idle-timer 5 t #'garbage-collect)
     (setq garbage-collection-messages nil))
 #+end_src

 #+RESULTS:
 : t

    Windows doesn't have a super key, so I remap the windows key to super. The problem is that the windows key often can't be overridden. I don't use it often, so I might revert.
    If on a mac, I like the super and meta keys to be in the same location as when I'm on my windows machine.
#+begin_src emacs-lisp
  (cond ((eq window-system 'w32)
	 (setq w32-pass-lwindow-to-system nil)
	 (setq w32-lwindow-modifier 'super))
	((eq window-system 'ns)
	 (setq mac-command-modifier 'meta)
	 (setq mac-option-modifier 'super)))
#+end_src

#+RESULTS:
: super

** Temporary File Management
   Emacs is a little too eager to save files everywhere. I found the below to keep version control without it leaving files all over the place
 #+begin_src emacs-lisp
   (use-package files
     :init
     (setq backup-directory-alist `(("." . ,(concat ak/custpath-emacsd "backups"))))
     (setq confirm-nonexistent-file-or-buffer nil))
 #+end_src

 #+RESULTS:

** Unicode
   When I use special characters in my org files (specifically this one) I get prompted by which character type should be saved. I havent solved this yet and it's what is preventing me from using fun characters for Org
#+begin_src emacs-lisp
  ;; make windows use utf-8. If I don't do this, images like dashes don't work ;; source: https://web.archive.org/web/20190726142720/https://goyoambrosio.com/2018/06/Dealing-with-utf-8-in-Emacs/
  (set-language-environment "UTF-8")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8) 
  (if (eq window-system 'w32) (set-w32-system-coding-system 'utf-8))
#+end_src

#+RESULTS:
: utf-8

* Package Installation
** Quelpa
   This allows me to install packages directly from github. I originally got it to download ob-racket so I could use racket in babel
#+begin_src emacs-lisp
  (use-package quelpa
    :ensure t
  )
#+end_src

#+RESULTS:

* UI
** Font
  I find that consolas works really well on my windows machine, but Source Code Pro is just a little more nifty. Normal thickness on windows doesn't look great with orgmode on my windows machine, so I have different settings for different computers

 #+begin_src emacs-lisp
	   ;; (set-face-attribute 'default nil :family "Consolas" :height 110)
	   ;; (set-face-attribute 'default nil :family "Hack" :height 105)
   (cond ((eq window-system 'w32)
	    (set-face-attribute 'default nil
				:family "Source Code Pro"
				:weight 'Regular
				;; :weight 'bold
				;; :width 'normal
				:height 107))
	 ((string-equal system-name "ANDREWs-Mac-mini.local")
	    (set-face-attribute 'default nil
				:family "Source Code Pro"
				:weight 'Regular
				;; :weight 'bold
				;; :width 'normal
				:height 128))
	  ((string-equal system-name "andrew-MACH-WX9")
	    (set-face-attribute 'default nil
				:family "Source Code Pro"
				:weight 'normal
				;; :weight 'bold
				;; :width 'normal
				:height 110)))
 #+end_src

 #+RESULTS:

** Theme
   I love the nord theme. It's not too harsh on the eyes and I think it looks really cool.
   counsel-load-theme is a great way to preview themes with `C-M-n` / `C-M-p`
 #+begin_src emacs-lisp
   (use-package doom-themes
     :ensure t
     :config (load-theme 'doom-nord t))

   (use-package color-theme-sanityinc-tomorrow
     :disabled
     :ensure t
     :config
     (load-theme 'sanityinc-tomorrow-eighties t))
 #+end_src

** Modeline
   Telephone line is a modeline replacement which is clean, light, and evil friendly. It's allegedly easy to configure, but I'm happy with the default.
   TODO try evil mode abbreviation to save on realestate
 #+begin_src emacs-lisp
  (use-package telephone-line
   :ensure t
   :init (telephone-line-mode 1))
 #+end_src

 #+RESULTS:
** Pdf-Tools
 #+begin_src emacs-lisp
   (use-package pdf-tools
    :disabled
    :if (eq window-system x)
    :init (telephone-line-mode 1))
 #+end_src
* Evil
#+begin_src emacs-lisp
  (use-package evil
    :ensure t
    :init
    (setq evil-want-C-u-scroll t) ;; c-u to scroll up
    (setq evil-want-keybinding nil) ;; do this for integration w/ evil collection
    :config
    (evil-mode 1)
    ;; (add-hook 'evil-local-mode-hook #'turn-on-undo-tree-mode)
    (add-hook 'prog-mode-hook #'turn-on-evil-mode)
  )

  (use-package evil-surround
    :ensure t
    :after evil
    :config
    (global-evil-surround-mode 1))

  (use-package evil-commentary
    :ensure t
    :after evil
    :config
    (evil-commentary-mode))

  (use-package evil-numbers
    :ensure t)

  (use-package evil-collection
    :ensure t
    :after evil
    :custom (evil-collection-company-use-tng nil) ;; gives errors when uses default of t
    :config
    (evil-collection-init))

  (use-package undo-tree
    ;;something wonky happened with undo/redo with evil and an update, so I need to add undo tree
    ;;details: https://www.reddit.com/r/emacs/comments/n1pibp/installed_evil_on_emacs_for_windows_redo_not/
    :ensure t
    :after evil
    :diminish
    :config
    (evil-set-undo-system 'undo-tree)
    (global-undo-tree-mode 1))
#+end_src

#+RESULTS:
: t

* Window Management
  I do a lot in emacs, and it can be overwhelming to manage all of the different buffers and windows lying about.
** Winner
   Winner allows me to iterate through previous window configurations. I've got some files listed to ignore as well.
   TODO I'd like to make a hydra for iterating through my winner states faster
 #+begin_src emacs-lisp
 (use-package winner
   :init (setq winner-boring-buffers
         '("*Completions*"
           "*Compile-Log*"
           "*inferior-lisp*"
           "*Fuzzy Completions*"
           "*Apropos*"
           "*dvc-error*"
           "*Help*"
           "*cvs*"
           "*Buffer List*"
           "*Ibuffer*"))
   :config (winner-mode 1))
 #+end_src

** Shackle
   Emacs will pop files up all over the place. This package helps reduce the insanity that results from this. I haven't done a comparison of how this changes the pop ups, but I get a sense that they are now more manageable
 #+begin_src emacs-lisp
   (use-package shackle
     :ensure t
     :defer t
     :config
     ;; (setq shackle-default-rule '(:select t))
     (shackle-mode t))
 #+end_src

 #+RESULTS:
 : t

** Golden Ratio
   When I'm coding there is usally a file that I'm focusing on. Golden ratio allows me to balance the window sizes based on the golden ratio. I don't like it on all of the time, but I can activate it with `<SPC> w g`
 #+begin_src emacs-lisp
   (use-package golden-ratio
     :ensure t)
 #+end_src
 
* Ivy, Counsel, Swiper
  - Hide star buffers w/ ivy-ignore buffers. Use C-c C-a to toggle back. Ref [[https://github.com/abo-abo/swiper/issues/644][here]].
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :init
    (setq ivy-use-virtual-buffers t
	  enable-recursive-minibuffers t
          ivy-initial-inputs-alist nil ;; don't use ^ w/ ivy M-x 
	  ivy-re-builders-alist
	    '((swiper . regexp-quote)
	      (t      . ivy--regex-fuzzy)))
    :config
    (setq ivy-ignore-buffers '("\\` " "\\`\\*")) ;; hide star buffers note above
    (ivy-mode 1))

  ;; fuzzy matching for ivy
  (use-package ivy-hydra
    :ensure t)

  ;; fuzzy matching for ivy
  (use-package flx
    :ensure t)

  (use-package counsel
    :ensure t)
#+end_src

#+RESULTS:

* Org
** General Org Settings
   Define paths and files of where to look for tasks.
  #+begin_src emacs-lisp
    ;; old two file system TODO delete if one file system works
    ;; (with-eval-after-load 'org (setq org-agenda-files
    ;; 				`(,ak/custpath-org-notes ,(concat ak/custpath-dropbox-org "phone_inbox.org"))))

    ;; new one file system
    (with-eval-after-load 'org (setq org-agenda-files (list ak/custpath-dropbox-org)))
  #+end_src 

  #+RESULTS:
  | /Users/AndrewKraemer/Dropbox/org/ |

   Autosave org files. I also use [[https://christiantietze.de/posts/2019/03/sync-emacs-org-files/#fn:simp][this]] in order to automatically reload changes to buffers -- allowing me to easily work on multiple machines.
  #+begin_src emacs-lisp
    (add-hook 'auto-save-hook 'org-save-all-org-buffers)
  #+end_src 

  I love using habits in org-mode, you need to make sure to call them out to use them, which is what this code snippet does
  #+begin_src emacs-lisp
    (with-eval-after-load 'org
      (add-to-list 'org-modules 'org-habit t))
  #+end_src
  
  This seems to be somehow related to the [[https://github.com/Somelauw/evil-org-mode/blob/master/doc/example_config.el][evil-org]] package, which I decided against using awhile ago. I don't know if this does anything
  TODO test org mode without this block
  #+begin_src emacs-lisp
    (setq evil-org-key-theme '(textobjects navigation additional insert todo))
  #+end_src 
** Org UI
   I stole this from emacs from scratch. It's not exactly what I want -- at least in windows -- but it is definately a step in the right diretion
#+begin_src emacs-lisp
    (defun efs/org-font-setup ()
     ;; Replace list hyphen with dot
     (font-lock-add-keywords 'org-mode
			     '(("^ *\\([-]\\) "
				(0 (prog1 () (compose-region (match-beginning 1) (match-end 1) ""))))))

     ;; Set faces for heading levels
     (dolist (face '((org-level-1 . 1.2)
		     (org-level-2 . 1.1)
		     (org-level-3 . 1.05)
		     (org-level-4 . 1.0)
		     (org-level-5 . 1.1)
		     (org-level-6 . 1.1)
		     (org-level-7 . 1.1)
		     (org-level-8 . 1.1)))
       (set-face-attribute (car face) nil :font "Source Code Pro" :weight 'regular :height (cdr face)))

     ;; Ensure that anything that should be fixed-pitch in Org files appears that way
     (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
     (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
     (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
     (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
     (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
     (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
     (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch))

     ;; (efs/org-font-setup)


  ;; (let* ((variable-tuple (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
  ;; 			     ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
  ;; 			     ((x-list-fonts "Verdana")         '(:font "Verdana"))
  ;; 			     ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
  ;; 			     (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
  ;;        ;; (base-font-color     (face-foreground 'default nil 'default))
  ;;        ;; (headline           `(:inherit default :weight bold :foreground ,base-font-color))
  ;;        (headline           `(:inherit default :weight bold))
  ;;        )

  ;;   (custom-theme-set-faces 'user
  ;; 			  `(org-level-8 ((t (,@headline ,@variable-tuple))))
  ;; 			  `(org-level-7 ((t (,@headline ,@variable-tuple))))
  ;; 			  `(org-level-6 ((t (,@headline ,@variable-tuple))))
  ;; 			  `(org-level-5 ((t (,@headline ,@variable-tuple))))
  ;; 			  `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
  ;; 			  `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
  ;; 			  `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
  ;; 			  `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
  ;; 			  `(org-document-title ((t (,@headline ,@variable-tuple :height 1.5 :underline nil))))))
#+end_src

#+RESULTS:

** Org Tasking
   These are my todo states. They are ordered by priority and, as such, Impact how my org-agenda is displayed
  #+begin_src emacs-lisp
    (setq org-todo-keywords
	  (quote ((sequence "IN_PROGRESS(i)" "NEXT(n)" "TODO(t)" "WAITING(w@/)" "DONE(d)"))))
  #+end_src

  This allows me to refile bullets to four levels deep in any of my org-agenda files
  #+begin_src emacs-lisp
    (setq org-refile-targets '((nil :maxlevel . 4)
			       (org-agenda-files :maxlevel . 4)))
  #+end_src

  Org caputure templates allow you to quickly create tasks following a structure. I like to make sure all tasks have a priority & go to my inbox. I have this large meeting template, but i don't use it currently. I still am working on a way of better capturing one-off notes related to a project.
  #+begin_src emacs-lisp
    (defvar my/org-meeting-template "** %<%Y-%m-%d %H:%M> %^{client/general} %^{meeting topic}
,*** Attendees:
,**** %?
,*** Goals:
,**** 
,*** Discussion:
,**** 
,*** Action Items:
,**** 
")

    (defvar ak/org-new-client-template "** %^{client_name}                                             :%\\1:
,*** Notes-%\\1
,**** General-Notes-%\\1
,*** Tasks-%\\1
")

    (setq org-capture-templates
        `(;; Note the backtick here, it's required so that the defvar based tempaltes will work!
          ;;http://comments.gmane.org/gmane.emacs.orgmode/106890 # deadlink

          ("t" "To-do" entry (file+headline ,(concat ak/custpath-dropbox-org "gtd.org") "Inbox")
            "** TODO [#%^{priority}] %^{Task Description}" :prepend t)
          ("c" "To-do Link" entry (file+headline ,(concat ak/custpath-dropbox-org "gtd.org") "Inbox")
            "** TODO [#%^{priority}] %A \n:PROPERTIES:\n:Created: %U\n:Source: %a\n:END:\n%?"
            :prepend t)
          ("m" "Meeting" entry (file+headline ,(concat ak/custpath-dropbox-org "gtd.org") "MeetingNotesInbox")
           ,my/org-meeting-template :prepend t)
          ("n" "New Client" entry (file+headline ,(concat ak/custpath-dropbox-org "gtd.org") "Notes-Databricks")
           ,ak/org-new-client-template)
    ))

 #+end_src

 #+RESULTS:
 | t | To-do      | entry | (file+headline /Users/andrew.kraemer/Dropbox/org/gtd.org Inbox) | ** TODO [#%^{priority}] %^{Task Description} | :prepend | t |
 | c | To-do Link | entry | (file+headline /Users/andrew.kraemer/Dropbox/org/gtd.org Inbox) | ** TODO [#%^{priority}] %A                   |          |   |

** Org-Agenda / priority
   I use my org agenda extensively. It's the holy grail of task management for me. I use `<SPC> o o` to quickly jump to my agenda. It's where I manage task completion. It's where I kick off my pomodoro timers. I can filter it by tags with `/ <TAB>` 
   This section gets a bit nitty gritty. Look at the [[https://orgmode.org/worg/doc.html][Worg documentation]] for details on these settings.

   Only show details for today when viewing the org agenda. I don't know which one does what, but org-agenda-show-future-repeats is allegedly the most up to date
 #+begin_src emacs-lisp
   (setq org-habit-show-all-today t)
   (setq org-habit-show-habits-only-for-today t)
   (setq org-agenda-show-future-repeats 'next)
 #+end_src

 #+RESULTS:
 : next
 
   This is to make my agenda look prettier.
   TODO does not work automatically
 #+begin_src emacs-lisp
   (use-package elegant-agenda-mode
     :ensure t
     ;; :hook org-agenda-mode-hook
     ;; :config (add-hook 'org-agenda-mode-hook)
     ;; :init (setq elegant-agenda-font "some other font")
     )
 #+end_src

 #+RESULTS:
 : t


   Non prioritized tasks will be sorted to d, though I usually make sure to priotize all of my tasks w/ my org capture
 #+begin_src emacs-lisp
   (setq org-lowest-priority ?E)
   (setq org-default-priority ?E)
 #+end_src

 #+RESULTS:
 : 69

   Customize the order in which tasks appear in the agenda
 #+begin_src emacs-lisp
   (setq org-agenda-sorting-strategy
       '((agenda habit-up deadline-up scheduled-up priority-up) ;; show habits, then time, then by priority
	 (tags todo-state-up deadline-up) ;; show todo-state then deadlines
	 (search category-keep)))
 #+end_src

 #+RESULTS:
 | agenda | habit-up      | deadline-up | scheduled-up | priority-up |
 | tags   | todo-state-up | deadline-up |              |             |
 | search | category-keep |             |              |             |

   Custom agenda filtering functions modified from [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][Aaron Bieber]] as well as some of my own
 #+begin_src emacs-lisp
   (defun air-org-skip-subtree-if-habit ()
     "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
     (let ((subtree-end (save-excursion (org-end-of-subtree t))))
       (if (string= (org-entry-get nil "STYLE") "habit")
	 subtree-end
       nil)))

   (defun air-org-skip-subtree-if-priority (priority)
     "Skip an agenda subtree if it has a priority of PRIORITY.
   PRIORITY may be one of the characters ?A, ?B, or ?C."
     (let ((subtree-end (save-excursion (org-end-of-subtree t)))
	 (pri-value (* 1000 (- org-lowest-priority priority)))
	 (pri-current (org-get-priority (thing-at-point 'line t))))
       (if (= pri-value pri-current)
	 subtree-end
       nil)))
      
   (defvar current-date-format "%Y-%m-%d"
     "Format of date to insert with `insert-current-date-time' func
      See help of `format-time-string' for possible replacements")

   (defun ak/org-skip-subtree-if-not-archived-today ()
     "Skip an agenda entry if it was not completed today"
     (concat ":ARCHIVE_TIME: " (format-time-string current-date-format (current-time))))
 #+end_src

 #+RESULTS:
 : air-org-skip-subtree-if-priority

   Settings for the different agenda blocks.
   - *Daily Agenda* is my primary view of all of my tasks
   - *Day in Review* gives me a way of seeing all of the tasks that I archvied (completed in a day)
   Utilizes Aaron Bieber functions to prevent tasks from appearing multiple times in agenda.
   TODO it might be smarter to have the custom commands saved separately for better documentation
 #+begin_src emacs-lisp
      (setq org-agenda-custom-commands
            '(
              ("d" "Daily agenda and all work TODOs"
               ((tags "PRIORITY=\"A\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                       (org-agenda-overriding-header "High-priority tasks:")
                       (org-agenda-files `(,ak/custpath-dropbox-org))))
                (agenda ""
                        ((org-agenda-span 'day)
                         (org-agenda-overriding-header "ALL normal priority tasks:")
                         (org-agenda-files `(,ak/custpath-dropbox-org))))
                (tags "PRIORITY=\"B\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                       (org-agenda-overriding-header "Medium-priority tasks:")
                       (org-agenda-files `(,ak/custpath-dropbox-org))))
                (tags "PRIORITY=\"C\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                       (org-agenda-overriding-header "Eventually tasks:")
                       (org-agenda-files `(,ak/custpath-dropbox-org))))
                (tags "PRIORITY=\"D\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                       (org-agenda-overriding-header "Personal tasks:")
                       (org-agenda-files `(,ak/custpath-dropbox-org))))
                ;;(alltodo ""
                ;;	 ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                ;;					 (air-org-skip-subtree-if-priority ?A)
                ;;					 (air-org-skip-subtree-if-priority ?B)
                ;;					 (org-agenda-skip-if nil '(scheduled deadline))))
                ;;	  (org-agenda-overriding-header "Eventually:")
                ;;	  (org-agenda-files `(,ak/custpath-dropbox-org))))
               )
               ;; ((org-agenda-compact-blocks t)) ;; removes = breaks
              )
              ("D" "Daily agenda and all work TODOs"
               ((tags "PRIORITY=\"A\""
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                       (org-agenda-tag-filter-preset '("+Work"))
                       (org-agenda-overriding-header "High-priority unfinished tasks:")
                       (org-agenda-files `(,ak/custpath-dropbox-org))))
                (agenda ""
                        ((org-agenda-span 'day)
                         (org-agenda-tag-filter-preset '("+Work"))
                         (org-agenda-overriding-header "ALL normal priority tasks:")
                         (org-agenda-files `(,ak/custpath-dropbox-org))))
                (tags (or "PRIORITY=\"B\"" "PRIORITY=\"C\"")
                      ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                       (org-agenda-tag-filter-preset '("+Work"))
                       (org-agenda-overriding-header "Unfinished tasks:")
                       (org-agenda-files `(,ak/custpath-dropbox-org))))
                (alltodo ""
                         ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                         (air-org-skip-subtree-if-priority ?A)
                                                         (air-org-skip-subtree-if-priority ?B)
                                                         (org-agenda-skip-if nil '(scheduled deadline))))
                          (org-agenda-tag-filter-preset '("+Work"))
                          (org-agenda-overriding-header "Eventually:")
                          (org-agenda-files `(,ak/custpath-dropbox-org)))))
               ;; ((org-agenda-compact-blocks t)) ;; removes = breaks
               )
   ;; OLD ORG AGENDA WITH SEPARATE FILES
   ;;	   ("d" "Daily agenda and all work TODOs"
   ;;	    ((tags "PRIORITY=\"A\""
   ;;		   ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
   ;;		    (org-agenda-overriding-header "High-priority unfinished tasks:")
   ;;		    (org-agenda-files `(,ak/custpath-org-work-loc ,(concat ak/custpath-dropbox-org "phone_inbox.org")))))
   ;;	     (agenda ""
   ;;		     ((org-agenda-span 'day)
   ;;		      (org-agenda-overriding-header "ALL normal priority tasks:")
   ;;		      (org-agenda-files `(,ak/custpath-org-work-loc ,(concat ak/custpath-dropbox-org "phone_inbox.org")))))
   ;;	     (tags (or "PRIORITY=\"B\"" "PRIORITY=\"C\"")
   ;;		   ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
   ;;		    (org-agenda-overriding-header "Unfinished tasks:")
   ;;		    (org-agenda-files `(,ak/custpath-org-work-loc ,(concat ak/custpath-dropbox-org "phone_inbox.org")))))
   ;;	     (alltodo ""
   ;;		      ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
   ;;						      (air-org-skip-subtree-if-priority ?A)
   ;;						      (air-org-skip-subtree-if-priority ?B)
   ;;						      (org-agenda-skip-if nil '(scheduled deadline))))
   ;;		       (org-agenda-overriding-header "Eventually:")
   ;;		       (org-agenda-files `(,ak/custpath-org-work-loc ,(concat ak/custpath-dropbox-org "phone_inbox.org"))))))
   ;;	    ;; ((org-agenda-compact-blocks t)) ;; removes = breaks
   ;;	    )

   ;; Identical to previous but uses different org file
   ;;	   ("D" "Daily agenda and all personal TODOs"
   ;;	    (
   ;;	     (tags "PRIORITY=\"A\""
   ;;		   ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
   ;;		    (org-agenda-overriding-header "High-priority unfinished tasks:")
   ;;		    (org-agenda-files `(,ak/custpath-org-personal-loc ,(concat ak/custpath-dropbox-org "phone_inbox.org")))))
   ;;	     (agenda ""
   ;;		     ((org-agenda-span 'day)
   ;;		      (org-agenda-overriding-header "ALL normal priority tasks:")
   ;;		      (org-agenda-files `(,ak/custpath-org-personal-loc ,(concat ak/custpath-dropbox-org "phone_inbox.org")))))
   ;;	     (tags (or "PRIORITY=\"B\"" "PRIORITY=\"C\"")
   ;;		   ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
   ;;		    (org-agenda-overriding-header "Unfinished tasks:")
   ;;		    (org-agenda-files `(,ak/custpath-org-personal-loc ,(concat ak/custpath-dropbox-org "phone_inbox.org")))))
   ;;
   ;;	     (alltodo ""
   ;;		      ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
   ;;						      (air-org-skip-subtree-if-priority ?A)
   ;;						      (air-org-skip-subtree-if-priority ?B)
   ;;						      (org-agenda-skip-if nil '(scheduled deadline))))
   ;;		       (org-agenda-overriding-header "Eventually:")
   ;;		       (org-agenda-files `(,ak/custpath-org-personal-loc ,(concat ak/custpath-dropbox-org "phone_inbox.org")))))
   ;;	    )
   ;;	    ;; ((org-agenda-files '("c:/Users/akraemer/Dropbox/org/personal/gtd.org")))
   ;;	    ;; (org-agenda-files `(,ak/custpath-org-personal-loc ,(concat ak/custpath-dropbox-org "phone_inbox.org")))
   ;;	    ;; ((org-agenda-compact-blocks t)) ;; removes = breaks
   ;;	    )
              ;; ("r" "Day in review"
              ;;    todo "DONE"
              ;;    ;; agenda settings
              ;;    ((org-agenda-files '("c:/Users/akraemer/Dropbox/org/catapult/gtd.org_archive"))
              ;;     (org-agenda-start-with-log-mode '(ARCHIVE_TIME))
              ;;     (org-agenda-archives-mode t)
              ;;     (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp (ak/org-skip-subtree-if-not-archived-today)))
              ;;     (org-agenda-overriding-header "Day in Review"))
              ;;    ;; ("~/org/review/day.html") ;; for export
              ;; 	   )
   ))
 #+end_src

 #+RESULTS:
 | d | Daily agenda and all work TODOs | ((tags PRIORITY="A" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done)) (org-agenda-overriding-header High-priority tasks:) (org-agenda-files `(,ak/custpath-dropbox-org)))) (agenda  ((org-agenda-span 'day) (org-agenda-overriding-header ALL normal priority tasks:) (org-agenda-files `(,ak/custpath-dropbox-org)))) (tags PRIORITY="B" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done)) (org-agenda-overriding-header Medium-priority tasks:) (org-agenda-files `(,ak/custpath-dropbox-org)))) (tags PRIORITY="C" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done)) (org-agenda-overriding-header Eventually tasks:) (org-agenda-files `(,ak/custpath-dropbox-org)))) (tags PRIORITY="D" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done)) (org-agenda-overriding-header Personal tasks:) (org-agenda-files `(,ak/custpath-dropbox-org)))))                                                                                                            |
 | D | Daily agenda and all work TODOs | ((tags PRIORITY="A" ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done)) (org-agenda-tag-filter-preset '(+Work)) (org-agenda-overriding-header High-priority unfinished tasks:) (org-agenda-files `(,ak/custpath-dropbox-org)))) (agenda  ((org-agenda-span 'day) (org-agenda-tag-filter-preset '(+Work)) (org-agenda-overriding-header ALL normal priority tasks:) (org-agenda-files `(,ak/custpath-dropbox-org)))) (tags (or PRIORITY="B" PRIORITY="C") ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done)) (org-agenda-tag-filter-preset '(+Work)) (org-agenda-overriding-header Unfinished tasks:) (org-agenda-files `(,ak/custpath-dropbox-org)))) (alltodo  ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit) (air-org-skip-subtree-if-priority 65) (air-org-skip-subtree-if-priority 66) (org-agenda-skip-if nil '(scheduled deadline)))) (org-agenda-tag-filter-preset '(+Work)) (org-agenda-overriding-header Eventually:) (org-agenda-files `(,ak/custpath-dropbox-org))))) |

   I love this function. It brings the agenda front and center. Thanks [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][Aaron Bieber]].
 #+begin_src emacs-lisp
   (defun air-pop-to-org-agenda-work (&optional split)
     "Visit the org agenda for work, in the current window or a SPLIT."
     (interactive "P")
     (org-agenda nil "d")
     (when (not split)
     (delete-other-windows)))
     

   (defun air-pop-to-org-agenda-personal (&optional split)
     "Visit the org agenda for personal, in the current window or a SPLIT."
     (interactive "P")
     (org-agenda nil "D")
     (when (not split)
     (delete-other-windows)))
 #+end_src

 #+RESULTS:
 : air-pop-to-org-agenda-personal

** Org-Bullets
   Org-Bullets makes the bullets in orgmode just a little bit nicer to look at.
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+end_src

** Org-pomodoro
   On good days, I use the pomodoro technique to track time and stay focused. I have my agenda customized to start a pomodoro for a task when I press `p` over a task. I can stop tracking on a task by pressing `O` then clock in with `I`. It's very neat, and I'm still getting the hang of it.
 #+begin_src emacs-lisp
   ;; https://github.com/yanivdll/.emacs.d/blob/master/config.org
   (use-package org-pomodoro
     :ensure t
     :config (setq org-pomodoro-play-sounds 1
		   org-pomodoro-finished-sound "c:/Users/akraemer/Dropbox/org/sounds/tone.wav"
		   org-pomodoro-long-break-sound "c:/Users/akraemer/Dropbox/org/sounds/tone.wav"
		   org-pomodoro-short-break-sound "c:/Users/akraemer/Dropbox/org/sounds/tone.wav"))
#+end_src


   I found the standard bell for the pomodoro timer to be a bit harsh, so I found a soothing yoga bell to use instead. To play wav files, I needed the sound-wav package. To use sound-wav on PC I need to make sure powershell is installed.
   TODO For some reason, powershell causes my emacs to start with a split window.
#+begin_src emacs-lisp
  ;;https://emacs.stackexchange.com/a/48352
  ;; required for org-sounds
  (use-package sound-wav
    :ensure t)

  ;; ;; required for sound if on windows
  (use-package powershell
    :if (memq window-system '(w32))
    :ensure t)
  #+end_src

  #+RESULTS:

#+RESULTS:

** Org-download
    Download screenshots into org. [[Https://zzamboni.org/post/how-to-insert-screenshots-in-org-documents-on-macos/][Source]].
 #+begin_src emacs-lisp
   (use-package org-download
     :after org
     :defer nil
     :custom
     (org-download-method 'directory)
     (org-download-image-dir "images")
     (org-download-heading-lvl nil)
     (org-download-timestamp "%Y%m%d-%H%M%S_")
     (org-image-actual-width 300)
     (org-download-screenshot-method "/usr/local/bin/pngpaste %s")
     :config
     (require 'org-download))
 #+end_src
 
 #+RESULTS:
 : t
** Org-journal
 #+begin_src emacs-lisp
  (use-package org-journal
   :ensure t
   :defer t
   :custom
   (org-journal-dir ak/custpath-journal-path)
   (org-journal-date-format "%Y-%m-%d"))
 #+end_src

 #+RESULTS:
 : t

** Org-Babel
 #+begin_src emacs-lisp
   (org-babel-do-load-languages
    'org-babel-load-languages
    '((R . t)
      (python . t)
      ;; (racket . t)
     ))
    ;; put viz inline by default
    (setq org-startup-with-inline-images t)

    (use-package ox-pandoc
      :ensure t
      :defer t)

     ;; pulled form my spacemacs for latex
     ;; (setenv "PATH" (concat (getenv "PATH") ":/sw/bin"))
     ;; (setq exec-path (append exec-path '("/sw/bin")))
 #+end_src
 
* RSS
  bort
** Elfeed
#+begin_src emacs-lisp
  (use-package elfeed
    :ensure t
    :config
    ;; (setq elfeed-show-entry-switch 'display-buffer) ;; TODO what does this do? https://www.reddit.com/r/emacs/comments/hq3r36/elfeed_configuration_to_display_in_next_window/
    (setq elfeed-db-directory (concat ak/custpath-dropbox-org "RSS"))
    :bind (:map elfeed-search-mode-map
		("A" . bjm/elfeed-show-all)
		("E" . bjm/elfeed-show-emacs)
		("D" . bjm/elfeed-show-daily)
		("/" . bjm/elfeed-search-live-filter-space)
		;; ("o" . ap/elfeed-search-browse-eww)
		("q" . bjm/elfeed-save-db-and-bury)))
#+end_src

#+RESULTS:
: bjm/elfeed-save-db-and-bury

** elfeed-org
   Use an org file to organise feeds.
#+begin_src emacs-lisp
  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list (concat ak/custpath-dropbox-org "elfeed.org"))))
#+end_src

** Elfeed helper functions
*** Filter
#+begin_src emacs-lisp
  (defun bjm/elfeed-search-live-filter-space ()
    "Insert space when running elfeed filter"
    (interactive)
    (let ((elfeed-search-filter (concat elfeed-search-filter " ")))
      (elfeed-search-live-filter)))

#+end_src
  
*** Shortcut Functions
#+begin_src emacs-lisp
  ;; TODO figure out how to get this working
  (defun ap/elfeed-search-browse-eww ()
    "Open selected items in EWW."
    (interactive)
    (let ((browse-url-browser-function #'eww-browse-url))
      (ap/elfeed-search-selected-map #'ap/elfeed-search-browse-entry)))

  (defun bjm/elfeed-show-all ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-all"))
  (defun bjm/elfeed-show-emacs ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-emacs"))
  (defun bjm/elfeed-show-daily ()
    (interactive)
    (bookmark-maybe-load-default-file)
    (bookmark-jump "elfeed-daily"))

#+end_src

#+RESULTS:
: bjm/elfeed-show-daily

*** Syncing
  functions to support syncing .elfeed between machines, since I use dropbox to use emacs in multiple places
#+begin_src emacs-lisp
  ;;makes sure elfeed reads index from disk before launching
  (defun bjm/elfeed-load-db-and-open ()
    "Wrapper to load the elfeed db from disk before opening"
    (interactive)
    (elfeed-db-load)
    (elfeed-update)
    (elfeed)
    (elfeed-search-update--force))

  ;;write to disk when quiting
  (defun bjm/elfeed-save-db-and-bury ()
    "Wrapper to save the elfeed db to disk before burying buffer"
    (interactive)
    (elfeed-db-save)
    (quit-window))
#+end_src

* Code & Development Tools
** Yasnippet
 #+begin_src emacs-lisp
 (use-package yasnippet
   :ensure t
   :defer 2
   :init
   (yas-global-mode 1))

 (use-package yasnippet-snippets
   :ensure t)
 #+end_src

** Company
    Auto-completion
   - TODO move this to the general section
 #+begin_src emacs-lisp
   (use-package company
     :hook
     (after-init . global-company-mode)
     :bind
     ;; make company completion work w/ vimkeys
     (:map company-active-map)
     ("C-n" . company-select-next-or-abort)
     ("C-p" . company-select-previous-or-abort))
 #+end_src

 #+RESULTS:

** Magit
 #+begin_src emacs-lisp
   (use-package magit
     :ensure t)

   (use-package evil-magit
     :disabled
     :ensure t
     :after magit)

   (use-package git-gutter
     :ensure t
     :config
     (global-git-gutter-mode 't)
     (setq git-gutter:disabled-modes '(org-mode image-mode pdf-view-mode))
     :diminish git-gutter-mode)
 #+end_src

 #+RESULTS:
 : t

** Projectile
 #+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :init
      (setq projectile-require-project-root nil)
      (setq projectile-completion-system 'ivy)
      :config
      (projectile-mode 1))

    (use-package counsel-projectile
     :ensure t
     :config
     (counsel-projectile-mode))
 #+end_src

 #+RESULTS:
 : t

** Lispy
 #+begin_src emacs-lisp
   (use-package lispy
     :disabled
     :ensure t
     :defer t
     :init
       (general-add-hook '(hy-mode-hook lisp-mode-hook emacs-lisp-mode-hook) #'lispy-mode)
       ;; (add-hook 'hy-mode-hook #'lispy-mode)
       ;; (add-hook 'lisp-mode-hook #'lispy-mode)
       ;; (add-hook 'emacs-lisp-mode-hook #'lispy-mode)
   )

   (use-package lispyville
     :ensure t
     :defer t
     :init
       (general-add-hook '(emacs-lisp-mode-hook hy-mode-hook lisp-mode-hook) #'lispyville-mode))
     :config
       (lispyville-set-key-theme '(additional prettify text-objects atom-motions additional-motions commentary slurp/barf-cp additional-wrap))
 #+end_src

 #+RESULTS:

** Python
*** Elpy
**** Install Instructions
     This setup is what I'm using for my M1 Mac. I'm using pyenv to manage my virtual python enviornments -- since it's a lot easier on the emacs side to manage than conda directly.
***** Pyenv
      #+begin_example
      brew install pyenv
      brew install pyenv-virtualenv
      pyenv install 3.9.4
      pyenv virtualenv 3.9.4 py39
      pyenv activate py39

      put this in .zshrc:
      if command -v pyenv 1>/dev/null 2>&1; then
        eval "$(pyenv init -)"
        eval "$(pyenv virtualenv-init -)"
      fi

      python -m pip install --upgrade pip

      pip install numpy pandas
      pip install -U scikit-learn
      pip install matplotlib seaborn

      pip install jupyterlab
      pip install jupyter_client==6.1 
      pip install flake8 jedi black
      #+end_example

      TODO: currently today, <2021-11-30 Tue>, the M1 mac can't make python venv with conda. Update this block to use a conda venv. We won't need to install numpy, pandas, jupyterlab, or other default conda packagages.

      I finally got this damn thing working. I was getting an error that it was trying to access a folder in my .emacsd that didn't exist. Normally emacs has no problem going ahead and creating folders and files willy nilly. In this case all of my issues were solved by just creating the following folder ==
 #+begin_src emacs-lisp
   ;; http://rakan.me/emacs/python-dev-with-emacs-and-pyenv/
   ;; (setq python-shell-completion-native-enable nil) 
   ;; (setenv "WORKON_HOME" "~/.pyenv/versions/")
   ;; (pyenv-mode-set "py39")

   (use-package python
     :mode ("\\.py\\'" . python-mode)
       ;; ("\\.wsgi$" . python-mode)
     :interpreter ("python3" . python-mode)
     :init
     (setq-default indent-tabs-mode nil)
     :config
     (setq python-indent-offset 4))

      ;;   (use-package pyenv-mode
      ;;     :ensure t
      ;;     :defer t)

	;; (use-package elpy
	;;   :ensure t
	;;   :defer t
	;;   :init
	;;   (setq python-shell-completion-native-enable nil) 
	;;   (setenv "WORKON_HOME" "~/.pyenv/versions/")
	;;   (pyenv-mode-set "py39")
	;;   (elpy-enable)
	;;   :config
	;;   (advice-add 'python-mode :before 'elpy-enable)
	;;   (setq python-shell-enable-font-lock nil) ;; make python shell faster
	;;   (setq python-shell-completion-native-enable nil) ;; IDK what this does
	;;   (setenv "WORKON_HOME" "~/.pyenv/versions/")	;; choose where to look for enviornments
	;;   (pyenv-mode-set "py39") ;; define which virtual enviornment to use

	;;   (setq elpy-shell-echo-output nil) ; fix for MacOS, see https://github.com/jorgenschaefer/elpy/issues/1550
	;;   (setq elpy-rpc-python-command "python3")
	;;   (setq elpy-rpc-timeout 2)

	;;   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)) ;; don't use use flymake

	;;   ;;(setq python-shell-interpreter "ipython"
	;;   ;;   python-shell-interpreter-args "-i --simple-prompt")

	;;   (setq python-shell-interpreter "jupyter" ;; use a jupyter shell
	;;    python-shell-interpreter-args "console --simple-prompt"
	;;    python-shell-prompt-detect-failure-warning nil)
	;;   (add-to-list 'python-shell-completion-native-disabled-interpreters
	;; 	    "jupyter")

	;;   ;; (add-hook 'elpy-mode-hook 'flycheck-mode) ;; use use flycheck instead & flymake
	;;   ;; (add-hook 'elpy-mode-hook (lambda () ;; format w/ black on save
	;;   ;; 	     (add-hook 'before-save-hook
	;;   ;; 		       'elpy-black-fix-code nil t)))
	;;   )
 #+end_src

 #+RESULTS:
 : ((python3 . python-mode) (hy . hy-mode) (racket . racket-mode) (ruby1.8 . ruby-mode) (ruby1.9 . ruby-mode) (jruby . ruby-mode) (rbx . ruby-mode) (ruby . ruby-mode) (python[0-9.]* . python-mode) (rhino . js-mode) (gjs . js-mode) (nodejs . js-mode) (node . js-mode) (gawk . awk-mode) (nawk . awk-mode) (mawk . awk-mode) (awk . awk-mode) (pike . pike-mode) (\(mini\)?perl5? . perl-mode) (wishx? . tcl-mode) (tcl\(sh\)? . tcl-mode) (expect . tcl-mode) (octave . octave-mode) (scm . scheme-mode) ([acjkwz]sh . sh-mode) (r?bash2? . sh-mode) (dash . sh-mode) (mksh . sh-mode) (\(dt\|pd\|w\)ksh . sh-mode) (es . sh-mode) (i?tcsh . sh-mode) (oash . sh-mode) (rc . sh-mode) (rpm . sh-mode) (sh5? . sh-mode) (tail . text-mode) (more . text-mode) (less . text-mode) (pg . text-mode) (make . makefile-gmake-mode) (guile . scheme-mode) (clisp . lisp-mode) (emacs . emacs-lisp-mode))

*** Elpy -- Previous setup -- NOT WORKING
     Elpy is the python IDE for emacs. I wasable to get this working on my windows pc but could not figure out what was going on on my mac
     To get this working, first =pip install flake8 jedi black=.
     Can't get it working with ipython but at least it's interactive.
   #+begin_src emacs-lisp
     ;; Python windows
     ;; (use-package elpy
     ;;   :if (eq window-system 'w32)
     ;;   :ensure t
     ;;   :defer t
     ;;   :init
     ;;     (advice-add 'python-mode :before 'elpy-enable)
     ;;     (pyvenv-activate ak/custpath-py-default-env)
     ;;   :config
     ;;     (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)) ;; don't use use flymake
     ;;     (add-hook 'elpy-mode-hook 'flycheck-mode) ;; use use flycheck instead
     ;;     (setq flycheck-python-flake8-executable ak/custpath-flake8)  ;; Need to install flake8 explicitly on windows
     ;;     (add-hook 'elpy-mode-hook (lambda ()
     ;; 		       (add-hook 'before-save-hook
     ;; 				 'elpy-black-fix-code nil t)))
     ;; )

     ;; ;; python linux
     ;; (use-package conda
     ;;   :if (not (eq window-system 'w32))
     ;;   :init
     ;;    (setq conda-env-home-directory (expand-file-name "~/anaconda3/") ;; as in previous example; not required
     ;; 	    conda-env-subdirectory "envs")
     ;;   (custom-set-variables
     ;;     '(conda-anaconda-home "/home/andrew/anaconda3/"))
     ;;   :config
     ;;   (conda-env-initialize-interactive-shells)
     ;;   (conda-env-initialize-eshell)
     ;;   (conda-env-autoactivate-mode t)
     ;;   (conda-env-activate "base"))

     ;; (use-package elpy
     ;;   :if (eq window-system 'x)
     ;;   :ensure t
     ;;   :defer t
     ;;   :init
     ;;   ;; (setenv "WORKON_HOME" "/home/andrew/anaconda3/envs") ;; don't need since we have conda package
     ;;   (advice-add 'python-mode :before 'elpy-enable)
     ;;   :config
     ;;   (elpy-enable)
     ;;   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)) ;; don't use use flymake
     ;;   (add-hook 'elpy-mode-hook 'flycheck-mode) ;; use use flycheck instead & flymake
     ;;   (add-hook 'elpy-mode-hook (lambda () ;; format w/ black on save
     ;; 		     (add-hook 'before-save-hook
     ;; 			       'elpy-black-fix-code nil t)))
     ;;   )


   #+end_src

   #+RESULTS:

#+begin_src emacs-lisp
		;; (use-package elpy
		;;   :ensure t
		;;   :defer t
		;;   :init
		;;   ;; (setenv "WORKON_HOME" "/home/andrew/opt/anaconda3/envs") ;; don't need since we have conda package
		;;   (advice-add 'python-mode :before 'elpy-enable)
		;;   :config
		;;   (elpy-enable)
		;;   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)) ;; don't use use flymake
		;;   (add-hook 'elpy-mode-hook 'flycheck-mode) ;; use use flycheck instead & flymake
		;;   (add-hook 'elpy-mode-hook (lambda () ;; format w/ black on save
		;; 	       (add-hook 'before-save-hook
		;; 			 'elpy-black-fix-code nil t))))

		;; (use-package conda
		;;   :defer t
		;;   :init
		;;   (setq conda-anaconda-home (expand-file-name "~/opt/anaconda3/envs/py38"))
		;;   (setq conda-env-home-directory (expand-file-name "~/opt/anaconda3/envs/py38"))
		;;   :config
		;;   (conda-env-initialize-interactive-shells)
		;;   (conda-env-initialize-eshell))

		  ;; (setq conda-anaconda-home (expand-file-name "~/opt/anaconda3/"))
		  ;; (setq conda-env-home-directory (expand-file-name "~/opt/anaconda3/"))
	    ;; (setenv "WORKON_HOME" "~/opt/anaconda3/envs")

	      ;; (pyvenv-activate (expand-file-name "~/opt/anaconda3/envs/py38"))
	  ;; (pyvenv-activate "~/opt/anaconda3/envs/py38")
	;; (pythonic-activate "~/opt/anaconda3/envs/py38")

#+end_src

#+RESULTS:
: ~/.pyenv/versions/

** C#
I'm taking the plunge into my first true OOP language for my Game Design class. Much of this code stolen from this [[https://joshwolfe.ca/emacs-csharp-development/][blog]]
*** csharp-mode
 #+begin_src emacs-lisp
   (use-package csharp-mode
     :ensure t
     :mode "\\.cs\\'")
 #+end_src

 #+RESULTS:
 : ((\.cs\' . csharp-mode) (c:/Users/akraemer/Dropbox/journal/\(?1:[0-9]\{4\}\)\(?2:[0-9][0-9]\)\(?3:[0-9][0-9]\)\(\.gpg\)?\' . org-journal-mode) (\.epub\' . nov-mode) (/git-rebase-todo\' . git-rebase-mode) (\.ps[dm]?1\' . powershell-mode) (\.rkt[dl]?\' . racket-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs].dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.jsm?\' . javascript-mode) (\.json\' . javascript-mode) (\.jsx\' . js-jsx-mode) (\.[ds]?vh?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX?\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx?\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:enigma\|gltron\|gtk\|hxplayer\|net\|neverball\|qt/.+\|realplayer\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

*** omnisharp
 #+begin_src emacs-lisp
   ;; (use-package omnisharp
   ;;   :after company
   ;;   :config
   ;;   (add-hook 'csharp-mode-hook 'omnisharp-mode)
   ;;   (add-to-list 'company-backends 'company-omnisharp))
 #+end_src

** lisps
   I love lisp. I spend too much time farting around with them.
*** hy
    Hy is a lisp with a python back-end. I love the idea of it but haven't had the opportunity to really dive into it.
  #+begin_src emacs-lisp
  (use-package hy-mode
    :ensure t
    :defer t
    :init (add-hook 'hy-mode-hook 'lispyville-mode))
  #+end_src
*** Racket
    After previously playing around with common-lisp and being somewhat overwhelmed by it -- as it is very old -- I've more recently decided to take on Racket as my default scripting lisp. It has multiple language modes, such as being used to be able to work with the same syntax as [[https://mitpress.mit.edu/sites/default/files/sicp/index.html][SICP]].
  #+begin_src emacs-lisp
    (use-package racket-mode
      :ensure t
      :defer t
      :init
	(add-hook 'racket-mode-hook 'lispyville-mode)
	(if (eq window-system 'w32) (setq racket-program "c:/Program Files/Racket/Racket.exe")))
  #+end_src

  #+RESULTS:

  Install the ob-racket package from github
  
#+begin_src emacs-lisp
  ;; (quelpa '(ob-racket :fetcher github :repo "DEADB17/ob-racket"))

  ;; (use-package ob-racket
  ;;   :after org
  ;;   :pin manual
  ;;   :config
  ;;   (append '((racket . t)) org-babel-load-languages))
#+end_src

#+RESULTS:
: t

* Writing & Reading
** Writeroom
   Write room is a package great for narrowing my focus on writing. It takes the full screen, much like your average "distraction free" writing enviornments. It's also nice to use with my helper function C-c f (f for focus) which toggles the narrowing of a sub tree in case I'm working with an unweildy org file
#+begin_src emacs-lisp
  (use-package writeroom-mode
    :ensure t)
#+end_src

** Word Count
   I want to experiment with writing 750 words in my journal a day. The settings below makes sure that I get a word count when I'm using my journal.
#+begin_src emacs-lisp
  (use-package wc-mode
    :ensure t)
#+end_src

#+RESULTS:

** eBooks
   Read ePub format books in emacs. Neat!
#+begin_src emacs-lisp
  (use-package nov
    :ensure t
    :defer t
    :custom (nov-text-width 80)
    :mode ("\\.epub\\'" . nov-mode))

  ;; windows needs additional configuration instructions here: https://emacs.stackexchange.com/questions/52426/unable-to-run-nov-mode-on-windows
  ;; this whole thing is a nightmare
  ;; (when (eq window-system 'w32)
  ;;   (setq nov-unzip-program "C:\\Users\\akraemer\\Downloads\\unzip.exe")
  ;;   (setq explicit-shell-file-name "C:\\msys64\\msys2.exe"))
#+end_src

#+RESULTS:
: C:\msys64\msys2.exe

* Checks
** Spelling
   I use aspell as my dictionary.
   - For windows: install instructions from [[https://www.reddit.com/r/emacs/comments/8by3az/how_to_set_up_sell_check_for_emacs_in_windows/][this reddit page]]. User thrillsd instructions using mysys2.
   - For Mac: install w/ Brew
 #+begin_src emacs-lisp
   (setq-default ispell-program-name ak/custpath-aspell)
 #+end_src

 #+RESULTS:
 : /usr/local/bin/aspell

** Flycheck
   Flycheck is my error checker. I have the flymake-run-in-place to avoid saving flymake files all over the place
 #+begin_src emacs-lisp
   (use-package flycheck
     :init  (setq flymake-run-in-place nil) ;; don't save flymake locally
     :ensure t)
 #+end_src

* Dired
  Dired is a powerful file management system within emacs. I would like to use it more, but some of it conflicts with with some of the evil keys. I'd like to use evil collection's dired keys.
  [[https://jonathanabennett.github.io/blog/2019/06/05/file-management-in-emacs-with-dired-mode/][Evil Dired good blog.]]
  Below makes it so that the dired buffer auto-updates. I'm also now full on the auto update train. Writing conflicts is the enemy.
#+begin_src emacs-lisp
  (setq dired-auto-revert-buffer t)
#+end_src

#+RESULTS:
: t

* Shell
  In emacs, I try to use eshell as much as possible. It does a good job -- especially compared to my options on windows. I'm interested in Elvish, which i might try some time
  In this block, I use some custom code to make sure the terminal alwasys appears on the bottom of the frame. It doesn't always work how I want it to, so I might change how I interact with it going forward
#+begin_src emacs-lisp
  (defun new-eshell ()
    "Open eshell on bottom of screen."
    (interactive)
    (let* ((lines (window-body-height))
	     (new-window (split-window-vertically (floor (* 0.7 lines)))))
	(select-window new-window)
	(eshell "eshell")))

  ;; will need to figure this out later
  (defun new-python-shell ()
    "Open python shell on bottom of screen."
    (interactive)
    (let* ((lines (window-body-height))
	     (new-window (split-window-vertically (floor (* 0.7 lines)))))
	(select-window new-window)
	(if (not (get-buffer "*Python*"))
	    (run-python))
	(switch-to-buffer "*Python*"
	  nil t)))

  (defun one-window-on-screen-p ()
    "Check if there is only one buffer on the screen."
    (= (length (window-list)) 1))
#+end_src

#+RESULTS:
: one-window-on-screen-p

* Remote connections
  Tramp allows me to access remote files. Getting it to work with windows is a little clunky. Follow these steps:
  - Snippet taken from here https://www.emacswiki.org/emacs/Tramp_on_Windows
  - create saved session in putty then use the name like shown below
  - run the following in eshell: "find-file /plink:bort:~/" Need to figure out how to get this to run in counsel-find file or get an easier way to access the vanilla find-file
#+begin_src emacs-lisp
  (use-package tramp
    :ensure t
    :defer t
    :init
     (when (eq window-system 'w32)
       (setq tramp-default-method "plink")
       (setenv "PATH" (concat "c:/Program Files/PuTTY/" ";" (getenv "PATH")))))
#+end_src

* Expand Region
  when you start on a word you can press `C-=` to expand to sentace/ line. Very helpful for mass grabbing. Very highly rated from what I've read
#+begin_src emacs-lisp
(use-package expand-region 
  :ensure t)
#+end_src

#+RESULTS:

* Key Bindings
** Which-Key
   which-key states which possible key commbinations can be used after a button is input
 #+begin_src emacs-lisp
 (use-package which-key
   :ensure t
   :init
   (setq which-key-separator " ")
   (setq which-key-prefix-prefix "+")
   :config
   (which-key-mode 1))
 #+end_src
 
** General
   General is my key-binding mangagement package. I like to have all of the keys in one place -- rather than trapped in my use-package. Especially with my general keys -- like w/ space.
 #+begin_src emacs-lisp
   (use-package general
     :ensure t
     :init
     ;; (setq evil-undo-system 'undo-tree) ;; fixes undo breaking. Research these settings more: https://github.com/sirn/dotfiles/blob/cdc36f826ef331e0d5c370d57663d4829552aa06/etc/emacs/packages/editor-evil.el
     ;; (setq evil-want-integration +1)
     ;; (setq evil-want-keybinding nil)
     ;; (setq evil-mode-line-format nil)
     :config (general-evil-setup) ;; let's me use general-*map keys
             (general-nvmap
               ;; replaces C-c with ,
               "," (general-simulate-key "C-c"))
             (general-define-key
               :states '(normal visual)
               ;; use visual line movement w/ j/k
               "j" 'evil-next-visual-line
               "k" 'evil-previous-visual-line
               ;; globally define 
               "C-=" 'er/expand-region
               "<f5>" 'webjump)
             (general-define-key
               :states '(normal viusal)
               :prefix "g"
               ;; bind gj and gk
               "j" 'evil-next-line
               "k" 'evil-previous-line)
             (general-define-key
               :states '(normal visual insert emacs)
               :keymaps 'override
               :prefix "SPC"
               :global-prefix "C-SPC"
               "."  '(ivy-resume :which-key "ivy-resume")
               "/"  '(swiper :which-key "swiper") ; You'll need counsel package for this ;; consider counsel-git-grep
               "\\"  '(counsel-rg :which-key "ripgrep") ; You'll need counsel package for this ;; consider counsel-git-grep
               "TAB" '(spacemacs/alternate-window :which-key "alternate buffer")
               "SPC" '(counsel-M-x :which-key "M-x")
               "f"   '(:ignore t :which-key "files")
               "ff"  '(counsel-find-file :which-key "find files")
               "fr"  '(counsel-recentf :which-key "recent files")
               "fs"  '(save-buffer :which-key "save buffer")
               "ft"  '(ak/ivy-tramp-find-file :which-key "find tramp files")
               "fh"  '(ak/ivy-home-find-file :which-key "find home files")
               "fd"  '(ak/ivy-dropbox-find-file :which-key "find dropbox files")
               ;;projects
               "p"   '(:ignore t :which-key "project")
               "pc"  '(:keymap projectile-command-map :which-key "commands")
               "pp"  '(projectile-switch-project :which-key "switch project")
               "pb"  '(counsel-projectile-switch-to-buffer :which-key "find project file")
               "pf"  '(counsel-projectile-find-file :which-key "find project file")
               "pg"  '(projectile-grep :which-key "grep project")
               "pk"  '(projectile-kill-buffers :which-key "kill all buffers in project")
               "pu"  '(projectile-run-project :which-key "run command for project")
               ;; rss
               "r"   '(:ignore t :which-key "rss")
               "rr"  '(bjm/elfeed-load-db-and-open :which-key "rss")
               ;; eval
               "e"   '(:ignore t :which-key "evaluate")
               "ee"  '(eval-last-sexp :which-key "last expression")
               "eE"  '(eval-expression :which-key "expression")
               "eb"  '(eval-buffer :which-key "buffer")
               "er"  '(eval-region :which-key "region")
               ;; Buffers
               "b"   '(:ignore t :which-key "buffers")
               "bb"  '(ivy-switch-buffer :which-key "buffers list")
               "bs"  '(ak/go-to-scratch :which-key "open scratch")
               "bn"  '(switch-to-next-buffer :which-key "next buffer")
               "bp"  '(switch-to-prev-buffer :which-key "prev buffer")
               "bd"  '(kill-this-buffer :which-key "delete buffer")
               "bk"  '(evil-delete-buffer :which-key "delete buffer and window")
               "bq"  '(ak/save-exit-buffer-list :which-key "quit gtd-files")
               "b."  '(ibuffer :which-key "ibuffer")
               ;; Window
               "w"   '(:ignore t :which-key "window")
               "wl"  '(windmove-right :which-key "move right")
               "wh"  '(windmove-left :which-key "move left")
               "wk"  '(windmove-up :which-key "move up")
               "wj"  '(windmove-down :which-key "move bottom")
               "wL"  '(evil-window-move-far-right :which-key "shift window right")
               "wH"  '(evil-window-move-far-left :which-key "shift window left")
               "wK"  '(evil-window-move-very-top :which-key "shift window up")
               "wJ"  '(evil-window-move-very-bottom :which-key "shift window bottom")
               "wv"  '(split-window-right :which-key "split right")
               "ws"  '(split-window-below :which-key "split bottom")
               "wo"  '(delete-other-windows :which-key "delete other windows")
               "wd"  '(delete-window :which-key "delete window")
               "wg"  '(golden-ratio :which-key "golden ratio")
               "wc"  '(evil-window-delete :which-key "delete window")
               "wu"  '(winner-undo :which-key "winner undo")
               "wU"  '(winner-redo :which-key "winner redo")
               "ww"  '(writeroom-mode :which-key "writeroom mode")
               "wS"  '(hydra-window-size/body :which-key "change size")
               ;; v for view
               "v"   '(:ignore t :which-key "view")
               "vc"  '(ivy-push-view :which-key "create view")
               "vv"  '(ivy-switch-view :which-key "switch view")
               "vs"  '(ak/save-ivy-views :which-key "save views")
               "vl"  '(ak/load-ivy-views :which-key "load views")
               ;; Org
               "o"   '(:ignore t :which-key "org")
               "ob"  '(ak/insert-bable :Which-key "insert bable")
               "oo"  '(air-pop-to-org-agenda-work :which-key "open standard work agenda")
               "oO"  '(air-pop-to-org-agenda-personal :which-key "open standard personal agenda")
               "oa"  '(org-agenda :which-key "open review agenda")
               "oc"  '(org-capture :which-key "org capture")
               "oj"  '(org-journal-new-entry :which-key "org journal")
               "op"  '(org-pomodoro :which-key "pomodoro start")
               "oP"  '(org-clock-out :which-key "pomodoro stop")
               ;; git
               "g"   '(:ignore t :which-key "git")
               "gs"  '(magit-status :which-key "magit status")
               "ga"  '(magit-stage :which-key "magit add")
               "gd"  '(magit-dispatch :which-key "magit dispatch")
               "gi"  '(magit-gitignore :which-key "magit gitignore")
               "gn"  '(git-gutter:next-hunk :which-key "next hunk")
               "gp"  '(git-gutter:previous-hunk :which-key "prev hunk")
               ;; Visual Toggles
               "t"   '(:ignore t :which-key "ui toggle")
               "tn"  '(display-line-numbers-mode :which-key "toggle line numbers")
               "tL"  '(org-toggle-link-display :which-key "toggle how org links show")
               "ti"  '(org-toggle-inline-images :which-key "toggle how org links show")
               "tl"  '(visual-line-mode :which-key "toggle line wrap")
               "tc"  '(flycheck-mode :which-key "toggle flycheck")
               "ts"  '(flyspell-mode :which-key "toggle flyspell")
               "tj"  '(json-pretty-print-buffer :which-key "toggle json pretty-print")
               ;; Flycheck
               "c"   '(:ignore t :which-key "code check")
               "cn"  '(flycheck-next-error :which-key "next error")
               "cp"  '(flycheck-previous-error :which-key "previous error")
               ;; Snippets
               "s"   '(:ignore t :which-key "code check")
               "ss"  '(yas-insert-snippet :which-key "next error")
               "sn"  '(yas-new-snippet :which-key "previous error")
               ;; Others
               "a"   '(:ignore t :which-key "a shell")
               "at"  '(new-eshell :which-key "eshell")
               "ap"  '(new-python-shell :which-key "python"))
             (general-define-key
               :states '(normal visual insert emacs)
               :prefix "C-c"
               ;; Quick open files
               "c"  '((lambda () (interactive) (find-file (concat ak/custpath-emacsd "myinit.org"))) :which-key "open .emacs")
               "o"  '((lambda () (interactive) (find-file (concat ak/custpath-dropbox-org "gtd.org"))) :which-key "open org")
               "n"  '((lambda () (interactive) (find-file (concat ak/custpath-dropbox-org "catapult/notes.org"))) :which-key "open notes")
               "N"  '((lambda () (interactive) (find-file (concat ak/custpath-dropbox-org "personal/notes.org"))) :which-key "open notes")
               ;; Vim  number increment
               "C-="  '(hydra-numbers/evil-numbers/inc-at-pt :which-key "increment num")
               "C--"  '(hydra-numbers/evil-numbers/dec-at-pt :which-key "decrement num"))
             (general-define-key
                :keymaps 'motion
                "." '(hydra-window-size/body :which-key "sizeup"))
             ;; org agenda (more options here: https://github.com/Somelauw/evil-org-mode/blob/master/evil-org-agenda.el)
             (general-define-key
                :keymaps 'org-agenda-mode-map
                "j" 'org-agenda-next-line
                "k" 'org-agenda-previous-line
                "u" 'org-agenda-undo
                "n" 'org-agenda-capture
                "p" 'org-pomodoro
                "C" 'org-agenda-clock-in)
             ;; Org C-c links
             (general-define-key
                :states '(normal)
                :prefix "C-c"
                :keymaps 'org-mode-map
                "l" 'org-store-link)
             ;; C-w & C-d conflicted w/ the racket repl. This allows the standard evil bindings for function properly.
             (general-unbind 'racket-repl-mode-map
                "C-w"
                "C-d")
             ;; (general-define-key
             ;;    :keymaps 'elpy-mode-map
             ;;    "C-c d" 'elpy-send-defun
             ;;    "C-c C-a" 'elpy-goto-assignment)
             (general-define-key
                :keymaps 'org-journal-mode-map
                "C-c C-c" 'ak/save-close-window)
             (general-define-key
                :keymaps 'org-mode-map
                 ;; Org-Promote
                "M-l" 'org-do-demote
                "M-h" 'org-do-promote
                "M-L" 'org-demote-subtree
                "M-H" 'org-promote-subtree
                "M-k" 'org-move-subtree-up
                "M-j" 'org-move-subtree-down
                "C-c f" 'ak/org-focus-subtree
                "C--" 'help/insert-em-dash
                "M--" 'help/insert-en-dash
                "C-M-y" 'org-download-clipboard)
             )
#+end_src

 #+RESULTS:
 : t

** Hydras
*** Zoom text
    Increase text size. Probably want to change the key binding
   #+begin_src emacs-lisp
 (defhydra hydra-zoom (global-map "<f2>")
  "zoom"
  ("=" text-scale-increase "in")
  ("-" text-scale-decrease "out"))
#+end_src 

*** Winner
    - I'd like to be able to cycle through a number of winner. There are some binding things here that I don't understand yet
#+begin_src emacs-lisp
  ;; (defhydra hydra-winner (global-map "<f2>")
  ;;  "Winner"
  ;;  ("u" winner-undo "in")
  ;;  ("U" winner-redo "out"))
#+end_src

#+RESULTS:
: hydra-winner/body

*** Window Sizes
   #+begin_src emacs-lisp
     (defhydra hydra-window-size ()
       "manage window sizes easier"
       (">" evil-window-increase-width "decrease height")
       ("<" evil-window-decrease-width "decrease with")
       ("+" evil-window-increase-height "increase height")
       ("-" evil-window-decrease-height "decrease height"))
   #+end_src 

   #+RESULTS:
   : hydra-window-size/body

*** buffers
    This would work on the normal buffer list. I could use something like this to make navigatig the ivy buffers a little easier
#+begin_src emacs-lisp
  ;;  (defhydra hydra-buffer-menu (:color pink
  ;; 			     :hint nil)
  ;;   "
  ;; ^Mark^             ^Unmark^           ^Actions^          ^Search
  ;; ^^^^^^^^-----------------------------------------------------------------
  ;; _m_: mark          _u_: unmark        _x_: execute       _R_: re-isearch
  ;; _s_: save          _U_: unmark up     _b_: bury          _I_: isearch
  ;; _d_: delete        ^ ^                _g_: refresh       _O_: multi-occur
  ;; _D_: delete up     ^ ^                _T_: files only: % -28`Buffer-menu-files-only
  ;; _~_: modified
  ;; "
  ;;   ("m" Buffer-menu-mark)
  ;;   ("u" Buffer-menu-unmark)
  ;;   ("U" Buffer-menu-backup-unmark)
  ;;   ("d" Buffer-menu-delete)
  ;;   ("D" Buffer-menu-delete-backwards)
  ;;   ("s" Buffer-menu-save)
  ;;   ("~" Buffer-menu-not-modified)
  ;;   ("x" Buffer-menu-execute)
  ;;   ("b" Buffer-menu-bury)
  ;;   ("g" revert-buffer)
  ;;   ("T" Buffer-menu-toggle-files-only)
  ;;   ("O" Buffer-menu-multi-occur :color blue)
  ;;   ("I" Buffer-menu-isearch-buffers :color blue)
  ;;   ("R" Buffer-menu-isearch-buffers-regexp :color blue)
  ;;   ("c" nil "cancel")
  ;;   ("v" Buffer-menu-select "select" :color blue)
  ;;   ("o" Buffer-menu-other-window "other-window" :color blue)
  ;;   ("q" quit-window "quit" :color blue))
  ;; ;; (define-key Buffer-menu-mode-map "." 'hydra-buffer-menu/body)
#+end_src

#+RESULTS:
: hydra-buffer-menu/body

*** evil-number
    Increase text size. Probably want to change the key binding
   #+begin_src emacs-lisp
      (defhydra hydra-numbers ()
	"numbers"
	("C-=" evil-numbers/inc-at-pt "increase")
	("C--" evil-numbers/dec-at-pt "dec"))
   #+end_src 

#+RESULTS:
: hydra-numbers/body

* Custom Functions
** go to scratch
   I like being able to have somewhere to write ideas or code snippets out quickly, so I made this helper function to get to scratch quickly
 #+begin_src emacs-lisp
 (defun ak/go-to-buffer (buffer)
   "goes to buffer. If buffer does not exist, creates buffer"
   (if (not (get-buffer buffer))
       (generate-new-buffer buffer))
   (switch-to-buffer buffer))

 (defun ak/go-to-scratch ()
   "runs ak/go-to-buffer for scratch file"
   (interactive)
   (ak/go-to-buffer "*buffer*"))
 #+end_src

 #+RESULTS:
 : ak/go-to-scratch

** Alternate buffers
   One of the few things I miss from spacemacs is some of the helper functions. I stole this to easily toggle back and forth between buffers.
 #+begin_src emacs-lisp
   (defun spacemacs/alternate-window (&optional window)
     (interactive)
     (let ((current-buffer (window-buffer window)))
       ;; if no window is found in the windows history, `switch-to-buffer' will
       ;; default to calling `other-buffer'
       (switch-to-buffer
	(cl-find-if (lambda (buffer)
		      (not (eq buffer current-buffer)))
		    (mapcar #'car (window-prev-buffers window)))
	nil t)))
 #+end_src

** Insert Bable
   This quickly generates a text snippet. I might switch this to a yasnippet in the future, but for now this works well.
#+begin_src emacs-lisp
  (defun ak/insert-bable ()
    "Insert src_sections for viz in orgmode."
    (interactive)
    (insert "#+begin_src "
	    (read-string "Enter Language (R, python, racket, lisp): ")
	    (if (equal (read-string "Return Viz (y/n) ") "y")
		" :results output graphics :file img.png"
	      ""))
    (insert "\n \n#+end_src"))
#+end_src

** Find File helpers
   This section has some cheater functions to get me to my favorite directories. I know this isn't the best way to do this. I should make a hydra or find an internal emacs tool for this
*** Tramp Find File
    Typing the full path to tramp files it tedious and my memory isn't good, so I mde this helper function based on the default tramp-method
  #+begin_src emacs-lisp
    (defun ak/ivy-tramp-find-file ()
      "find-file with Tramp. Ex: '/plink:bort:~/'. See tramp note to setup"
      (interactive)
      (let ((tramp-path (concat "/" tramp-default-method ":")))
	(counsel-find-file tramp-path)))
  #+end_src

*** Find File Home
    I don't alwasys do a good job maintaining my home area, so this is a function which just takes me to where I want to go.
  #+begin_src emacs-lisp
    (defun ak/ivy-home-find-file ()
      "open counsel-find-file in the home directory"
      (interactive)
      (counsel-find-file ak/custpath-home))
  #+end_src

*** Find File dropbox
    Take me to dropbox
  #+begin_src emacs-lisp
    (defun ak/ivy-dropbox-find-file ()
      "open counsel-find-file in the Dropbox directory"
      (interactive)
      (counsel-find-file ak/custpath-dropbox))
  #+end_src

  #+RESULTS:
  : ak/ivy-dropbox-find-file

** Save and close window
   Wanted to have something for org-journal that behaves like magit buffer when you C-c C-c
 #+begin_src emacs-lisp
   (defun ak/save-close-window ()
     "save, kill buffer, and kill window of focused file"
     (interactive)
     (save-buffer)
     (kill-buffer)
     (delete-window))
 #+end_src

 #+RESULTS:
 : ak/save-close-window

** Focus / unfocus on org bullet
    Toggle org narrow subtreee / show everything.
#+begin_src emacs-lisp
  (defun ak/org-focus-subtree ()
    "Toggle org narrow subtreee / show everything"
    (interactive)
    (if (buffer-narrowed-p)
	(widen)
      (org-narrow-to-subtree)))
#+end_src

#+RESULTS:
: ak/org-focus-subtree

** Close all gtd files
    Quickly save and close gtd files to not conflict with other computers
#+begin_src emacs-lisp
  (setq gtd-buffer-list '("inbox.org" "gtd.org" "gtd.org_archive" "notes.org" "notes.org_archive" "phone_inbox.org")) ;; custpath

  (defun ak/delete-buffer-list (buffer)
    "Delete buffer if exists"
    (when (get-buffer buffer)
      (kill-buffer buffer)))

  (defun ak/save-exit-buffer-list ()
    "save all buffers in list then close them. Used for keeping gtd from conflicting on multiple machines"
    (interactive)
    (save-some-buffers gtd-buffer-list)
    (mapcar #'ak/delete-buffer-list gtd-buffer-list))
#+end_src

#+RESULTS:
: ak/save-exit-buffer-list

** Writing shortcuts
#+begin_src emacs-lisp
   (defun help/insert-em-dash ()
    "Inserts an EM-DASH (not a HYPEN, not an N-DASH)"
    (interactive)
    (insert "â"))
  (defun help/insert-en-dash ()
    "Inserts an EN-DASH (not a HYPEN, not an EM-DASH)"
    (interactive)
    (insert "â"))
#+end_src

#+RESULTS:
: help/insert-en-dash

** Character With Function
   # TODO Expand on this
   #+begin_src elisp
     ;; frame- or window-resizing function
     ;; from http://dse.livejournal.com/67732.html. Resizes either frame or window
     ;; to 80 columns. If the window can be sized to 80 columns wide, without 
     ;; resizing the frame itself, it will resize the window. Otherwise, it will 
     ;; resize the frame. You can use a prefix argument to specify a 
     ;; different column width
     (defun fix-frame-horizontal-size (width)
       "Set the frame's size to 80 (or prefix arg WIDTH) columns wide."
       (interactive "P")
       (if window-system
	   (set-frame-width (selected-frame) (or width 80))
	 (error "Cannot resize frame horizontally: is a text terminal")))

     (defun fix-window-horizontal-size (width)
       "Set the window's size to 80 (or prefix arg WIDTH) columns wide."
       (interactive "P")
       (enlarge-window (- (or width 80) (window-width)) 'horizontal))

     (defun fix-horizontal-size (width)
       "Set the window's or frame's width to 80 (or prefix arg WIDTH)."
       (interactive "P")
       (condition-case nil
	   (fix-window-horizontal-size width)
	 (error 
	  (condition-case nil
	      (fix-frame-horizontal-size width)
	    (error
	     (error "Cannot resize window or frame horizontally"))))))

     (global-set-key (kbd "C-x W") 'fix-horizontal-size)
    #+end_src 

    #+RESULTS:
    : fix-horizontal-size

* Epilogue 
  Here we close the let expression from the preface.
  #+begin_src emacs-lisp
    (setq gc-cons-threshold (* 2 1000 1000))
    )
  #+end_src

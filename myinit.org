* Notes
** TODO Planned Tweaks
   - [ ] Fix Agenda / use [[https://github.com/alphapapa/org-super-agenda][org-super-agenda]]
   - [ ] Org Blog w/ [[https://ox-hugo.scripter.co/][ox-hugo]]. [[https://www.reddit.com/r/orgmode/comments/gcex8p/creating_a_blog_with_orgmode/][Reddit Post]]
   - [ ] LSP instead of elpy
   - [ ] gitgutter
   - [ ] customize telephone line [[https://www.reddit.com/r/emacs/comments/7e7xzg/telephoneline_theming_question/][colors]] to match theme
   - [ ] Figure out where & how windows knows where my emacs is
   - [ ] PDF-viewer
   - [ ] Move org-files to dropbox
   - [ ] Treemacs (do I need this?)
   - [ ] ace by abo-abo?
   - [ ] hydra for windows
   - [ ] fix ediff
   - [ ] org make todotype selection easier
   - [ ] Default new todo bullet to TODO not inprogress
   - [ ] magit path reset
   - [ ] Figure out pomodoro
   - [ ] add hooks more elegantly
   - [ ] babel installs
   - [ ] R
   - [ ] Config Shackle (do I need to? I feel like I've been able to supress a lot as of late)
   - [ ] vim bracket buffer movement
   - [X] [[https://www.reddit.com/r/emacs/comments/4n0n8o/what_is_the_best_emacs_mode_line_package/][some sort of mode line]]. [[https://github.com/dbordak/telephone-line][Telephone-line]] looks promising
   - [X] Tramp: Fix ivy "c:" problem, or just make custom function around it
   - [X] Custom paths
   - [X] figure out lispy (I just went w/ lispyville)
   - [X] Make sure next buffer and last buffer only do real files
   - [X] move w/ evil in agenda
   - [X] magit consider j and k 
   - [X] spell-fu ;; why not in melpa? aspell w/ wierd packman install
   - [X] make this an org file
** Inspiration + links
   - [[https://www.youtube.com/watch?v=49kBWM3RQQ8&list=PL9KxKa8NpFxIcNQa9js7dQQIHc81b0-Xg&index=1][Using Emacs videos]]
   - Originally inspaired by based on [[https://huytd.github.io/emacs-from-scratch.html#orgf713fce][this]] implementation 
   - Kwrooijen's [[https://github.com/kwrooijen/.emacs.d/tree/40e0054b012814fd1550e3c6648af4a22e73df72][implmentation]]. Uses evil, use-package, and many abo-abo. 
   - Emacs Adventures [[https://github.com/amolgawai/emacsadventures/tree/92578a5b5bf71ccc7f2e1859edefaa97d8d51df1/config][robust emacs config]] 
   - [[https://sam217pa.github.io/2016/09/23/keybindings-strategies-in-emacs/][Key bindings article]]
   - [[https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html][Aaron Bieber]] the guy who convinced me to try Evil. I steal from his Agenda setup
   - [[https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org][This one]] is beautiful. Found it when investigating mode lines

* Package Configuration 
** Paths
#+begin_src emacs-lisp
  (setq workstation 'catapult) ;; options: catapult

  (setq user-full-name "Andrew Kraemer")
  (setq user-mail-address "andrew.h.kraemer@gmail.com")

  (cond ((eq workstation 'catapult)
	 (setq ak/custpath-emacsd "c:/emacs/.emacs.d/"
	       ak/custpath-org-notes "c:/emacs/notes/"
	       ak/custpath-py-default-env "c:/Users/akraemer/Anaconda3/envs/py37"
	       ak/custpath-flake8 "c:/Users/akraemer/Anaconda3/Scripts/flake8.exe"
	       ak/custpath-aspell "c:/msys64/mingw64/bin/aspell.exe")))
#+end_src

** Interface adjustments
 #+begin_src emacs-lisp
 ;;; Code:
 ;; Minimal UI
 (scroll-bar-mode  -1)
 (tool-bar-mode    -1)
 (tooltip-mode     -1)
 (blink-cursor-mode 0)
 (fringe-mode 0)
 (setq initial-scratch-message nil)
 (setq ring-bell-function 'ignore)
 (setq redisplay-dont-pause t ;; Scrolling smoothness
   scroll-margin 1
   scroll-step 1
   scroll-conservatively 10000
   scroll-preserve-screen-position 1)
 (setq temporary-file-directory (concat ak/custpath-emacsd "tmp")) ;; Don't save flycheck locally
 ;; set meta & super keys ;;cust
 (setq w32-pass-lwindow-to-system nil)
 (setq w32-lwindow-modifier 'super) ; Left Windows key

 (fset 'yes-or-no-p 'y-or-n-p)

 ;; Show matching parens
 (setq show-paren-delay 0)
 (show-paren-mode 1)

 ;;match parens automatically
 (electric-pair-mode +1)
 
 ;; Pretty lambda symbol
 (global-prettify-symbols-mode 1)
 #+end_src

 #+RESULTS:
 : t

** Font
 #+begin_src emacs-lisp
   (set-face-attribute 'default nil :family "Consolas" :height 110)
 #+end_src

** Theme / UI / Modeline
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config (load-theme 'doom-nord t))

;; (use-package color-theme-sanityinc-tomorrow
;;   :ensure t
;;   :config
;;   (load-theme 'sanityinc-tomorrow-eighties t))
#+end_src

#+begin_src emacs-lisp
 (use-package telephone-line
  :init (telephone-line-mode 1))
#+end_src

** Winner
   Undo / redo window / setup
 #+begin_src emacs-lisp
 (use-package winner
   :init (setq winner-boring-buffers
         '("*Completions*"
           "*Compile-Log*"
           "*inferior-lisp*"
           "*Fuzzy Completions*"
           "*Apropos*"
           "*dvc-error*"
           "*Help*"
           "*cvs*"
           "*Buffer List*"
           "*Ibuffer*"))
   :config (winner-mode 1))
 #+end_src

** Shackle
   Manage popups
 #+begin_src emacs-lisp
   (use-package shackle
     :ensure t
     :defer t
     :config
     ;; (setq shackle-default-rule '(:select t))
     (shackle-mode t))
 #+end_src

 #+RESULTS:
 : t

** Files
   Stop files from saving temporary files everywhere
 #+begin_src emacs-lisp
 ;; files
 (use-package files
   :init
   ;; Backup ~ files in seperate directory
   (setq backup-directory-alist `(("." . ,(concat ak/custpath-emacsd "backups"))))
   ;; No confirmation when creating new buffer
   (setq confirm-nonexistent-file-or-buffer nil))
 #+end_src

 #+RESULTS:

** Evil
 #+begin_src emacs-lisp
 ;; Vim mode
 (use-package evil
   :ensure t
    ;; c-u to scroll up
   :init
   (setq evil-want-C-u-scroll t)
   :config
   (evil-mode 1)
   (add-hook 'prog-mode-hook #'turn-on-evil-mode))

 (use-package evil-surround
   :ensure t
   :config
   (global-evil-surround-mode 1))

 (use-package evil-commentary
   :ensure t
   :config
   (evil-commentary-mode))

 (use-package evil-numbers
   :ensure t)
 #+end_src

** Golden Ratio
 #+begin_src emacs-lisp
 (use-package golden-ratio
   :ensure t)
 #+end_src

** Ivy, Counsel, Swiper
   - Hide star buffers w/ ivy-ignore buffers. Use C-c C-a to toggle back. Ref [[https://github.com/abo-abo/swiper/issues/644][here]].
 #+begin_src emacs-lisp
   (use-package ivy
     :ensure t
     :init
     (setq ivy-use-virtual-buffers t
	   enable-recursive-minibuffers t
	   ivy-re-builders-alist
	   '((swiper . regexp-quote)
	     (t      . ivy--regex-fuzzy)))
     :config
     (setq ivy-ignore-buffers '("\\` " "\\`\\*")) ;; hide star buffers note above
     (ivy-mode 1))

   ;; fuzzy matching for ivy
   (use-package flx
     :ensure t)

   (use-package counsel
     :ensure t)
 #+end_src

 #+RESULTS:

** Company
   Auto-completion
  - TODO move this to the general section
#+begin_src emacs-lisp
  (use-package company
    :hook
    (after-init . global-company-mode)
    :bind
    ;; make company completion work w/ vimkeys
    (:map company-active-map)
    ("C-n" . company-select-next-or-abort)
    ("C-p" . company-select-previous-or-abort))
#+end_src

#+RESULTS:

** Magit
 #+begin_src emacs-lisp
 (use-package magit
   :ensure t)

 (use-package evil-magit
   :after magit)
 #+end_src

 #+RESULTS:

** Projectile
 #+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :init
      (setq projectile-require-project-root nil)
      (setq projectile-completion-system 'ivy)
      :config
      (projectile-mode 1))

    (use-package counsel-projectile
     :ensure t
     :config
     (counsel-projectile-mode))
 #+end_src

 #+RESULTS:
 : t

** Org
 
 #+begin_src emacs-lisp
   (use-package org-bullets
     :ensure t
     :config
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

   (with-eval-after-load 'org (setq org-agenda-files     ;; cust
				   `(,ak/custpath-org-notes)))

   ;; Org-Todos
   (setq evil-org-key-theme '(textobjects navigation additional insert todo))
   (setq org-todo-keywords
	 (quote ((sequence "NEXT(n)" "TODO(t)" "WAITING(w@/)" "IN_PROGRESS(i)" "DONE(d)"))))

   (setq org-refile-targets '(
			      (nil :maxlevel . 4)             ; refile to headings in the current buffer
			      (org-agenda-files :maxlevel . 4) ; refile to any of these files
			      ))

   ;; Org-Habits
   (with-eval-after-load 'org
     (add-to-list 'org-modules 'org-habit t))
   (setq org-habit-show-all-today t)

   ;; Org-Capture
   (defvar my/org-meeting-template "** Meeting about %^{something}
     SCHEDULED: %<%Y-%m-%d %H:%M>
     ,*Attendees:*
     - [X] Nick Anderson
     - [ ] %?
     ,*Agenda:*
     -
     -
     ,*Notes:*
     ")

   (setq org-capture-templates
       `(;; Note the backtick here, it's required so that the defvar based tempaltes will work!
	 ;;http://comments.gmane.org/gmane.emacs.orgmode/106890

	 ("t" "To-do" entry (file+headline ,(concat ak/custpath-org-notes "gtd.org") "Inbox")
	   "** TODO [#%^{priority}] %^{Task Description}" :prepend t)
	 ("c" "To-do Link" entry (file+headline ,(concat ak/custpath-org-notes "gtd.org") "Inbox")
	   "** TODO [#%^{priority}] %A \n:PROPERTIES:\n:Created: %U\n:Source: %a\n:END:\n%?"
	   :prepend t)
	 ("m" "Meeting" entry (file+headline ,(concat ak/custpath-org-notes "meetings.org") "Meeting Notes")
	  ,my/org-meeting-template)
   ))

#+end_src


#+begin_src emacs-lisp
   ;; Org-Pomodoro ;; https://github.com/yanivdll/.emacs.d/blob/master/config.org
   (use-package org-pomodoro
     :ensure t
     ;; :commands (org-pomodoro)
     :config
     ;; (setq alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil))))
     )
 #+end_src

 #+begin_src emacs-lisp
(use-package org-download
  :ensure t
  :config
  ;; add support to dired
  (add-hook 'dired-mode-hook 'org-download-enable))
 #+end_src

 #+RESULTS:
 : t

** org agenda / priority
   Something in this config is breaking the graph. It works if I comment out these two blocks and use a regular org agenda, then reopen and delete the colin in schedule
#+begin_src emacs-lisp

  ;; Org-Priority
  ;; (setq org-lowest-priority ?D)
  ;; (setq org-default-priority ?D)
  ;; (setq org-agenda-sorting-strategy
  ;;       '((agenda time-up priority-down tag-up category-keep effort-up)
  ;; 	;; (todo user-defined-up todo-state-up priority-down effort-up)
  ;; 	(todo todo-state-up priority-down effort-up)
  ;; 	(tags user-defined-up)
  ;; 	(search category-keep)))

#+end_src

#+begin_src emacs-lisp
  ;; Org-Agenda custom view
  ;; https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html
  ;; (defun air-org-skip-subtree-if-habit ()
  ;;   "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  ;;   (let ((subtree-end (save-excursion (org-end-of-subtree t))))
  ;;     (if (string= (org-entry-get nil "STYLE") "habit")
  ;; 	subtree-end
  ;;       nil)))

  ;; (defun air-org-skip-subtree-if-priority (priority)
  ;;   "Skip an agenda subtree if it has a priority of PRIORITY.
  ;; IORITY may be one of the characters ?A, ?B, or ?C."
  ;;   (let ((subtree-end (save-excursion (org-end-of-subtree t)))
  ;; 	(pri-value (* 1000 (- org-lowest-priority priority)))
  ;; 	(pri-current (org-get-priority (thing-at-point 'line t))))
  ;;     (if (= pri-value pri-current)
  ;; 	subtree-end
  ;;       nil)))
  ;; (setq org-agenda-custom-commands
  ;;       '(("d" "Daily agenda and all TODOs"
  ;; 	 ((tags "PRIORITY=\"A\""
  ;; 		((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
  ;; 		 (org-agenda-overriding-header "High-priority unfinished tasks:")))
  ;; 	  (agenda "test" ((org-agenda-ndays 1)
  ;; 		      (org-agenda-overriding-header "ALL normal priority tasks:")))
  ;; 	  (tags (or "PRIORITY=\"B\"" "PRIORITY=\"C\"")
  ;; 		((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
  ;; 		 (org-agenda-overriding-header "Unfinished tasks:")))
  ;; 	  (alltodo ""
  ;; 		   ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
  ;; 						   (air-org-skip-subtree-if-priority ?A)
  ;; 						   (air-org-skip-subtree-if-priority ?B)
  ;; 						   (org-agenda-skip-if nil '(scheduled deadline))))
  ;; 		    (org-agenda-overriding-header "Eventually:"))))
  ;; 	 ;; ((org-agenda-compact-blocks t)) ;; removes = breaks
  ;; 	 )))

  ;; (defun air-org-agenda-next-header ()
  ;; "Jump to the next header in an agenda series."
  ;;   (interactive)
  ;;   (air--org-agenda-goto-header))

  ;; (defun air-org-agenda-previous-header ()
  ;;   "Jump to the previous header in an agenda series."
  ;;   (interactive)
  ;;   (air--org-agenda-goto-header t))

  ;; (defun air--org-agenda-goto-header (&optional backwards)
  ;;   "Find the next agenda series header forwards or BACKWARDS."
  ;;   (let ((pos (save-excursion
  ;; 	       (goto-char (if backwards
  ;; 			      (line-beginning-position)
  ;; 			    (line-end-position)))
  ;; 	       (let* ((find-func (if backwards
  ;; 				     'previous-single-property-change
  ;; 				   'next-single-property-change))
  ;; 		      (end-func (if backwards
  ;; 				    'max
  ;; 				  'min))
  ;; 		      (all-pos-raw (list (funcall find-func (point) 'org-agenda-structural-header)
  ;; 					 (funcall find-func (point) 'org-agenda-date-header)))
  ;; 		      (all-pos (cl-remove-if-not 'numberp all-pos-raw))
  ;; 		      (prop-pos (if all-pos (apply end-func all-pos) nil)))
  ;; 		 prop-pos))))
  ;;     (if pos (goto-char pos))
  ;;     (if backwards (goto-char (line-beginning-position)))))

  ;; (defun air-pop-to-org-agenda (&optional split)
  ;;   "Visit the org agenda, in the current window or a SPLIT."
  ;;   (interactive "P")
  ;;   (org-agenda nil "d")
  ;;   (when (not split)
  ;;     (delete-other-windows)))
#+end_src

** Babel
 #+begin_src emacs-lisp
 (org-babel-do-load-languages
 'org-babel-load-languages
 '((R . t)
     (python . t)))
 ;; put viz inline by default
 (setq org-startup-with-inline-images t)

 (use-package ox-pandoc
   :ensure t
   :defer t)
 #+end_src

** Yasnippet
 #+begin_src emacs-lisp
 (use-package yasnippet
   :ensure t
   :defer 2
   :init
   (yas-global-mode 1))

 (use-package yasnippet-snippets
   :ensure t)
 #+end_src

** elpy
 #+begin_src emacs-lisp
 ;; Python
 (use-package elpy
   :ensure t
   :defer t
   :init
     (advice-add 'python-mode :before 'elpy-enable)
     (setq python-shell-interpreter "jupyter"
	python-shell-interpreter-args "console --simple-prompt"
	python-shell-prompt-detect-failure-warning nil)
     (pyvenv-activate ak/custpath-py-default-env)
   :config
     (setq elpy-modules (delq 'elpy-module-flymake elpy-modules)) ;; don't use use flymake
     (add-hook 'elpy-mode-hook 'flycheck-mode) ;; use use flycheck instead
     (setq flycheck-python-flake8-executable ak/custpath-flake8) ;; Need to install flake8 explicitly on windows
 )
 #+end_src

** hy
 #+begin_src emacs-lisp
 (use-package hy-mode
   :defer t
   :init (add-hook 'hy-mode-hook 'lispyville-mode))
 #+end_src

 #+RESULTS:
 | lispy-mode |

** Lispy
 #+begin_src emacs-lisp
   ;; Lispy
   ;;(use-package lisp;; y
   ;;   :ensure t
   ;;   :defer t
   ;;   :init
   ;;     (general-add-hook '(hy-mode-hook lisp-mode-hook emacs-lisp-mode-hook) #'lispy-mode)
   ;;     ;; (add-hook 'hy-mode-hook #'lispy-mode)
   ;;     ;; (add-hook 'lisp-mode-hook #'lispy-mode)
   ;;     ;; (add-hook 'emacs-lisp-mode-hook #'lispy-mode)
   ;;)

   (use-package lispyville
     :ensure t
     :defer t
     :init
       (general-add-hook '(emacs-lisp-mode-hook hy-mode-hook lisp-mode-hook) #'lispyville-mode))
     :config
       (lispyville-set-key-theme '(additional prettify text-objects atom-motions additional-motions commentary slurp/barf-cp additional-wrap))
 #+end_src

 #+RESULTS:

** Tramp
   - Snippet taken from here https://www.emacswiki.org/emacs/Tramp_on_Windows
   - create saved session in putty then use the name like shown below
   - run the following in eshell: "find-file /plink:bort:~/" Need to figure out how to get this to run in counsel-find file or get an easier way to access the vanilla find-file
 #+begin_src emacs-lisp
   (use-package tramp
     :ensure t
     :defer t
     :init
      (when (eq window-system 'w32)
	(setq tramp-default-method "plink")
	(setenv "PATH" (concat "c:/Program Files/PuTTY/" ";" (getenv "PATH")))))
 #+end_src

** eshell
 #+begin_src emacs-lisp
 ;; eshell config
 (defun new-eshell ()
   "Open eshell on bottom of screen."
   (interactive)
   (when (one-window-on-screen-p)
     (let* ((lines (window-body-height))
            (new-window (split-window-vertically (floor (* 0.7 lines)))))
       (select-window new-window)
       (eshell "eshell"))))

 (defun one-window-on-screen-p ()
   "Check if there is only one buffer on the screen."
   (= (length (window-list)) 1))
 #+end_src

** Checks
*** Spelling
    install instructions from [[https://www.reddit.com/r/emacs/comments/8by3az/how_to_set_up_sell_check_for_emacs_in_windows/][this reddit page]]. User thrillsd instructions using mysys2. 
  #+begin_src emacs-lisp
    (setq-default ispell-program-name ak/custpath-aspell)  ;; install aspell w/ msys on windows
  #+end_src

  #+RESULTS:
  : C:/msys64/mingw64/bin/aspell.exe

*** Flycheck
  #+begin_src emacs-lisp
  (use-package flycheck
    :ensure t)
  (setq flymake-run-in-place nil) ;; don't save flymake locally
  #+end_src

** Which-Key
 #+begin_src emacs-lisp
 (use-package which-key
   :ensure t
   :init
   (setq which-key-separator " ")
   (setq which-key-prefix-prefix "+")
   :config
   (which-key-mode 1))
 #+end_src

* Key Bindings
** General
 #+begin_src emacs-lisp
   ;; Custom keybinding
   (use-package general
     :ensure t
     :config (general-evil-setup) ;; let's me use general-*map keys
	     (general-nvmap
	       ;; replaces C-c with ,
	       "," (general-simulate-key "C-c"))
	     (general-define-key
	       :states '(normal visual)
	       ;; use visual line movement w/ j/k
	       "j" 'evil-next-visual-line
	       "k" 'evil-previous-visual-line)
	     (general-define-key
	       :states '(normal viusal)
	       :prefix "g"
	       ;; bind gj and gk
	       "j" 'evil-next-line
	       "k" 'evil-previous-line)
	     (general-define-key
	       :states '(normal visual insert emacs)
	       :prefix "SPC"
	       :non-normal-prefix "M-SPC"
	       "/"  '(swiper :which-key "swiper") ; You'll need counsel package for this ;; consider counsel-git-grep
	       "\\"  '(counsel-rg :which-key "ripgrep") ; You'll need counsel package for this ;; consider counsel-git-grep
	       "TAB" '(spacemacs/alternate-window :which-key "alternate buffer")
	       "SPC" '(counsel-M-x :which-key "M-x")
	       "f"   '(:ignore t :which-key "files")
	       "ff"  '(counsel-find-file :which-key "find files")
	       "fr"  '(counsel-recentf :which-key "recent files")
	       "fs"  '(save-buffer :which-key "save buffer")
	       "ft"  '(ak/ivy-tramp-find-file :which-key "find tramp files")
	       ;;projects
	       "p"   '(:ignore t :which-key "project")
	       "pc"  '(:keymap projectile-command-map :which-key "commands")
	       "pp"  '(projectile-switch-project :which-key "switch project")
	       "pb"  '(counsel-projectile-switch-to-buffer :which-key "find project file")
	       "pf"  '(counsel-projectile-find-file :which-key "find project file")
	       "pg"  '(projectile-grep :which-key "grep project")
	       "pk"  '(projectile-kill-buffers :which-key "kill all buffers in project")
	       ;; eval
	       "e"   '(:ignore t :which-key "evaluate")
	       "ee"  '(eval-last-sexp :which-key "last expression")
	       "eE"  '(eval-expression :which-key "expression")
	       "eb"  '(eval-buffer :which-key "buffer")
	       "er"  '(eval-region :which-key "region")
	       ;; Buffers
	       "b"   '(:ignore t :which-key "buffers")
	       "bb"  '(ivy-switch-buffer :which-key "buffers list")
	       "bs"  '(ak-go-to-scratch :which-key "open scratch")
	       "bn"  '(switch-to-next-buffer :which-key "next buffer")
	       "bp"  '(switch-to-prev-buffer :which-key "prev buffer")
	       "bd"  '(kill-this-buffer :which-key "delete buffer")
	       "bk"  '(evil-delete-buffer :which-key "delete buffer and window")
	       ;; Window
	       "w"   '(:ignore t :which-key "window")
	       "wl"  '(windmove-right :which-key "move right")
	       "wh"  '(windmove-left :which-key "move left")
	       "wk"  '(windmove-up :which-key "move up")
	       "wj"  '(windmove-down :which-key "move bottom")
	       "w/"  '(split-window-right :which-key "split right")
	       "w-"  '(split-window-below :which-key "split bottom")
	       "wx"  '(delete-window :which-key "delete window")
	       "wg"  '(golden-ratio :which-key "golden ratio")
	       "wd"  '(evil-window-delete :which-key "delete window")
	       ;; v for view
	       "v"   '(:ignore t :which-key "view")
	       "vc"  '(ivy-push-view :which-key "create view")
	       "vv"  '(ivy-switch-view :which-key "switch view")
	       ;; Org
	       "o"   '(:ignore t :which-key "org")
	       "ob"  '(ak-insert-bable :Which-key "insert bable")
	       "oo"  '(air-pop-to-org-agenda :which-key "Open Agenda")
	       "oc"  '(org-capture :which-key "Org Capture")
	       ;; org-pomodoro
	       "op"  '(org-clock-in :which-key "Pomodoro Start")
	       "oP"  '(org-clock-out :which-key "Pomodoro Stop")
	       ;; Magit
	       "g"   '(:ignore t :which-key "magit")
	       "gs"  '(magit-status :which-key "magit status")
	       "ga"  '(magit-stage :which-key "magit add")
	       "gd"  '(magit-dispatch :which-key "magit dispatch")
	       "gi"  '(magit-gitignore :which-key "magit gitignore")
	       ;; Visual Toggles
	       "t"   '(:ignore t :which-key "ui toggle")
	       "tn"  '(display-line-numbers-mode :which-key "toggle line numbers")
	       "tl"  '(org-toggle-link-display :which-key "toggle how org links show")
	       "tL"  '(visual-line-mode :which-key "toggle line wrap")
	       "tc"  '(flycheck-mode :which-key "toggle flycheck")
	       "ts"  '(flyspell-mode :which-key "toggle flyspell")
	       "tj"  '(json-pretty-print-buffer :which-key "toggle json pretty-print")
	       ;; Flycheck
	       "c"   '(:ignore t :which-key "code check")
	       "cn"  '(flycheck-next-error :which-key "next error")
	       "cN"  '(flycheck-previous-error :which-key "previous error")
	       ;; Others
	       "at"  '(new-eshell :which-key "eshell"))
	     (general-define-key
	       :states '(normal visual insert emacs)
	       :prefix "C-c"
	       ;; Quick open files
	       "c"  '((lambda () (interactive) (find-file (concat ak/custpath-emacsd "myinit.org"))) :which-key "open .emacs")
	       "o"  '((lambda () (interactive) (find-file (concat ak/custpath-org-notes "gtd.org"))) :which-key "open org")
	       "n"  '((lambda () (interactive) (find-file (concat ak/custpath-org-notes "notes.org"))) :which-key "open notes")
	       ;; winner undo / redo
	       "H"  '(winner-undo :which-key "winner undo")
	       "L"  '(winner-redo :which-key "winner redo")
	       ;; Vim  number increment
	       "C-="  '(evil-numbers/inc-at-pt :which-key "increment num")
	       "C--"  '(evil-numbers/dec-at-pt :which-key "decrement num"))
	     ;; org agenda (more options here: https://github.com/Somelauw/evil-org-mode/blob/master/evil-org-agenda.el)
	     (general-define-key
		:keymaps 'org-agenda-mode-map
		"j" 'org-agenda-next-line
		"k" 'org-agenda-previous-line
		"u" 'org-agenda-undo
		"C" 'org-agenda-clock-in)
	     ;; Org C-c links
	     (general-define-key
		:states '(normal)
		:prefix "C-c"
		:keymaps 'org-mode-map
		"l" 'org-store-link)
	     (general-define-key
		:keymaps 'elpy-mode-map
		"C-c d" 'elpy-send-defun
		"C-c C-a" 'elpy-goto-assignment)
	     ;; Org-Promote
	     (general-define-key
		:keymaps 'org-mode-map
		"M-l" 'org-do-demote
		"M-h" 'org-do-promote
		"M-L" 'org-demote-subtree
		"M-H" 'org-promote-subtree
		"M-k" 'org-move-subtree-up
		"M-j" 'org-move-subtree-down))
 #+end_src

 #+RESULTS:
 : t

** Functions

*** go to scratch
  #+begin_src emacs-lisp
  (defun ak-go-to-buffer (buffer)
    "goes to buffer. If buffer does not exist, creates buffer"
    (if (not (get-buffer buffer))
        (generate-new-buffer buffer))
    (switch-to-buffer buffer))

  (defun ak-go-to-scratch ()
    "runs ak-go-to-buffer for scratch file"
    (interactive)
    (ak-go-to-buffer "*buffer*"))
  #+end_src

  #+RESULTS:
  : ak-go-to-scratch

*** Alternate buffers
    Stolen from SPC-TAB spacemacs
  #+begin_src emacs-lisp
    (defun spacemacs/alternate-window (&optional window)
      (interactive)
      (let ((current-buffer (window-buffer window)))
        ;; if no window is found in the windows history, `switch-to-buffer' will
        ;; default to calling `other-buffer'
	(switch-to-buffer
	 (cl-find-if (lambda (buffer)
		       (not (eq buffer current-buffer)))
		     (mapcar #'car (window-prev-buffers window)))
	 nil t)))
  #+end_src

*** Insert Bable
#+begin_src emacs-lisp
 (defun ak-insert-bable ()
   "Insert src_sections for viz in orgmode."
   (interactive)
   (insert "#+begin_src "
           (read-string "Enter Language (R, python, lisp): ")
           (if (equal (read-string "Return Viz (y/n) ") "y")
               " :results output graphics :file img.png"
             ""))
   (insert "\n \n#+end_src"))
#+end_src

#+RESULTS:
: ak-insert-bable

*** testing area
  #+begin_src emacs-lisp
    (defun ak/ivy-tramp-find-file ()
      "find-file with Tramp. Ex: '/plink:bort:~/'. See tramp note to setup"
      (interactive)
      (let ((tramp-path (concat "/" tramp-default-method ":")))
	(counsel-find-file tramp-path)))
  #+end_src

  #+RESULTS:
  : ak/ivy-tramp-find-file
  
  
  
